<apex:page showHeader="true" sidebar="false" extensions="WorkOrderDeKitExtV2" standardController="Work_Order__c" tabStyle="Work_Order__c" docType="html-5.0">

 <c:KendoResources />
    <apex:includeScript value="{!$Resource.GridActionListJS}" />
    
    <apex:form id="workOrderForm">
        <div class="page-container">
            <apex:sectionHeader title="DeKit/Scrap Work Order: {!Work_Order__c.Name}" />
            <div class="page-message" />
            <apex:pageMessages id="msgs" />
            
            <apex:pageBlock title="DeKit/Scrap Information">
                <apex:pageBlockButtons location="top">
                    <apex:outputPanel layout="none">
                        <input type="button" value="Save" class="btn save-command" accesskey="s" />
                        <apex:commandButton value="{!$Label.Cancel}" action="{!cancel}" status="actionStatus" reRender="workOrderForm"/>
                    </apex:outputPanel>
                </apex:pageBlockButtons>
                
                <div class="grid-container">
                    <div class="grid-message" />
                    <div id="DekitGrid" />
                </div>
                
                <div id="DekitWindow" class="grid-window">
                    <div id="tabstrip">
                        <ul>
                            <li id="DekitTab" class="k-state-active">
                                Dekit
                            </li>
                            <li id="ScrapTab">
                                Scrap
                            </li>
                        </ul> 
                    <div>    
                        <div class="grid-container k-block k-info-colored">
                            <div id="serials" class="grid-serial-lines" style="width:{!gridSize}px" />
    
                        </div>
                    </div>
                    <div>
                        <div class="grid-container k-block k-info-colored">
                            <div id="scrapGridSerial" class="grid-scrap-serial-lines" style="width:{!gridSize}px" />
                        </div>
                    </div>
                </div>
                 </div>     
            </apex:pageBlock>
        </div>
    </apex:form>
    
    <script type="text/javascript">
        var serialTracked = {!serialTracked};
        var serialData = [];
        var serialWindow;
        var showSerialTopBar = {!serialShowTopBar};
        
        var DekitGrid;
        
        var skidColumns = [];
        var skidData = []; 
        
        var expandedRows = [];
        
        var renderRecordNumber = function() {
            return ++record;
        }

        var DekitData = function() {
            var deferred = $.Deferred();
            var messageElement = $("#DekitGrid").closest("div.grid-container").find("div.grid-message");

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.WorkOrderDeKitExtV2.getDeKitData}',
                '{!workOrder.Id}',
                function(result,event) {
                    if (event.type == 'exception') {
                        KenandyErp.Message(event.message,KenandyErp.MessageType.Error,messageElement);
                    } else if (result.success){
                        if (result.total == 0) {
                            KenandyErp.Message("No materials available for dekit",KenandyErp.MessageType.Info,messageElement);
                            $(".save-command").prop("disabled",true);
                        }
                        deferred.resolve(result,event);
                    } else {
                        KenandyErp.Messages(result.messages,messageElement);
                        KenandyErp.UnBlockUI($("#DekitGrid"));
                    }
                },
                { escape: false }
            );
            return deferred.promise();
        };
        
        $(document).on('KenandyErpReady',function(e) {
            KenandyErp.KendoGridOptions.DefaultPageSize = KenandyErp.KendoGridOptions.PageSizes[0];
             $("#tabstrip").kendoTabStrip({
                animation:  {
                    open: {
                        effects: "fadeIn"
                    }
                }
            });
            $('#tabstrip').hide();                
            WorkOrderUtil.Init({
                workOrderId: '{!workOrder.Id}',
                workOrderData: '{!JSENCODE(workOrderJson)}',
                mtFieldList: '{!JSENCODE(mtFieldList)}',
                skidFieldList: '{!JSENCODE(skidFieldList)}',
            });
        });
        
        var WorkOrderUtil = function() {
            return {
                workOrderId: null,
                workOrderData: null,
                mtFieldList: null,
                skidFieldList: null,

                Init: function(args) {
                    this.workOrderId = args.workOrderId;
                    this.workOrderData = JSON.parse(args.workOrderData);
                    this.mtFieldList = JSON.parse(args.mtFieldList);
                    this.skidFieldList = JSON.parse(args.skidFieldList);
                    
                    KenandyErp.CleanNamespace(this.workOrderData,'{!namespaceUU}');
                    
                    this.RenderWidgets();
                },
                
                RenderWidgets: function() {
                    WorkOrderUtil.DeKitGridInit();
                    
                    var mtDateFields = KenandyErp.KendoGridOptions.GetDateFields(JSONUtils.Parse(WorkOrderUtil.mtFieldList));
                    var skidDateFields = KenandyErp.KendoGridOptions.GetDateFields(JSONUtils.Parse(WorkOrderUtil.skidFieldList));
                
                    $('.save-command').on("click",$.proxy(WorkOrderUtil.Save,{ grid: DekitGrid, mtDateFields: mtDateFields,skidDateFields: skidDateFields }));
                },
                
                DeKitGridInit: function() {
                    var mtFieldList = this.mtFieldList;
                    var mtDateFields = KenandyErp.KendoGridOptions.GetDateFields(JSONUtils.Parse(mtFieldList));
                    var skidFieldList = this.skidFieldList;
                    var skidDateFields = KenandyErp.KendoGridOptions.GetDateFields(JSONUtils.Parse(skidFieldList));
                    var gridConfig = '{!JSENCODE(DeKitConfigJson)}';
                    
                    DekitGrid = $('#DekitGrid').kendoGridActionList({
                        namespace: '{!NamespaceUU}', 
                        config: gridConfig,
                        fieldList: mtFieldList,
                        getActionListFunction: DekitData,
                        modelIdField: 'material.Id',
                        showIconButtons: false,
                        detailTemplate: kendo.template($("#detailTemplate").html())
                    }).data('kendoGridActionList');
                    
                    
                    
                    DekitGrid.hideColumn("IsSelected__custom");
                    DekitGrid.wrapper.on("click",".grid-expand-all-custom-command",$.proxy(this.ExpandRows,{ grid: DekitGrid }));
                    DekitGrid.wrapper.on("click",".grid-collapse-all-custom-command",$.proxy(this.CollapseRows,{ grid: DekitGrid }));
                    
                    DekitGrid.bind("detailExpand",$.proxy(this.DetailExpand,{ grid: DekitGrid }));
                    DekitGrid.bind("detailCollapse",$.proxy(this.DetailCollapse,{ grid: DekitGrid }));
                    
                    DekitGrid.bind("detailInit",$.proxy(WorkOrderUtil.SkidGridInit,{ 
                        grid: DekitGrid, type: 'kit',serialsButtonName: 'serials-custom-command',serialsButtonClass: 'grid-serials-custom-command'
                    }));
                    
                    DekitGrid.wrapper.on("click", ".grid-populate-component-quantities-custom-command", $.proxy(WorkOrderUtil.Populate, { grid: DekitGrid }));
                    DekitGrid.refresh();
                },
                
                
                
                SkidGridInit: function(e) {
                    var grid = this.grid;
                    var mWrapper = e.data;
                    var skidGrid = e.detailRow.find('div.grid-SKIDs').data('kendoGrid');
                    var type = this.type;
                    var buttons = [KenandyErp.KendoGridOptions.CommandType.Create];
                   // var skidFieldList = WorkOrderUtil.skidFieldList;
                    var linesLookupSearchFilters = [];
                    linesLookupSearchFilters.push({ field: "skid.Location__c", filter: "Facility__c=\'" + WorkOrderUtil.workOrderData.Facility__c + "\'" });
                    linesLookupSearchFilters.push({ field: "skid.Bin__c", filter: "Location__c = \'#=skid.Location__c#\'" });
                    
                    linesLookupSearchFilters.push({ field: "skid.ScrapLocation__c", filter: "Facility__c=\'" + WorkOrderUtil.workOrderData.Facility__c + "\'" });
                    linesLookupSearchFilters.push({ field: "skid.ScrapBin__c", filter: "Location__c = \'#=skid.ScrapLocation__c#\'" });
                 
                    var serialFieldList = JSONUtils.Parse('{!JSENCODE(serialFieldList)}');
                    
                    var skidDateFields = KenandyErp.KendoGridOptions.GetDateFields(mWrapper.skidFields);
                    var skidReferenceFields = KenandyErp.KendoGridOptions.GetReferenceFields(mWrapper.skidFields);
                    var serialsButtonName = this.serialsButtonName;
                    var serialsButtonClass = this.serialsButtonClass;

                   // skidColumns = _.union(skidColumns,skidFieldList);

                    var material = mWrapper.material;
                    var uid = mWrapper.uid;
                    
                    var serialWrapperList = WorkOrderUtil.GetDetailListById(uid);
                    
                    var detailMessageElement = e.sender.element.closest("div.grid-container").find("div.grid-SKID-message");

                    if (serialWrapperList.length === 0 && e.data.serialWrapperList.length > 0) {
                        $.each(e.data.serialWrapperList,function(a,b) {
                            serialWrapperList.push(b);    
                        });
                    }
                    
                    var getSkidModel = function() {
                        var fields = KenandyErp.KendoGridOptions.GetFields(mWrapper.skidFields);
                        fields.IsSelected__custom = { type: "boolean" };

                        var model = kendo.data.Model.define({ id: "Id",fields: fields });
                        return model;
                    };
                            
                    var getSkidColumns = function() {
                        var columns = [];

                        $.each(KenandyErp.KendoGridOptions.GetColumns(mWrapper.skidFields,{ lookupSearchAction: '{!$RemoteAction.WorkOrderDeKitExtV2.lookupSearchFilter}',lookupSearchFilters: linesLookupSearchFilters,validateLookupOnBlur: true}),function(a,b) {
                            columns.push(b);
                        });
                        
                        if (serialTracked) {
                            var commands = [];
                            commands.push({ name: serialsButtonName,text: "",template: "<input type='button' value='Serials' class='btn " + serialsButtonClass + "'/>" });
                            columns.push({ command: commands,title: "Action",width: 60 });
                        }
                        
                        return columns;
                    };
                    
                    var getSkidDataSource = function() {   
                        var dataSource = new kendo.data.DataSource({
                            data: serialWrapperList,
                            batch: true,
                            schema: {
                                model: getSkidModel(),
                                parse: function(response) {
                                    $.each(response,function(idx, item) {
                                        item = Serializer.ConvertFromSFDCDate(item,{ dateFields: skidDateFields });
                                    });
                                    return response;
                                }
                            },
                            change: function() {
                                WorkOrderUtil.UpdateSkidList(uid,this.data());
                            } 
                        });
                        return dataSource;
                    };
                    
                    var onDataBound = function(e) {
                        if (e.sender.dataSource.total() == 0) {
                            var colCount = e.sender.columns.length;
                            
                            $(e.sender.wrapper)
                                .find('.k-grid-content tbody')
                                .append('<tr class="kndy-grid-empty"><td colspan="' + colCount + '" class="kndy-grid-empty-message">No records to display</td></tr>');
                        }
                        
                        try {
                            var data = e.sender.dataSource.view();
                            var parentGrid = grid;
                            
                            if (serialTracked) {
                                var masterRowDataItem = parentGrid.dataItem(e.sender.element.closest('tr.k-detail-row').prev());
                                var enableSerialButton = (masterRowDataItem.material.Item__r && masterRowDataItem.material.Item__r.Item_Attribute__r 
                                    && masterRowDataItem.material.Item__r.Item_Attribute__r.Serial_Number__c) ? true : false;
                                
                                if (!enableSerialButton) {
                                    setTimeout(function() {
                                        for (var i = 0; i < data.length; i++) {
                                            var rowUid = data[i].uid;
                                            var currenRow = grid.table.find("tr[data-uid='" + rowUid + "']");
                                            $(currenRow).find("." + serialsButtonClass).toggleClass('btnDisabled',true).prop('disabled',true);
                                        }
                                    },0);
                                }
                            }
                        } catch(e) { }
                    };

                    skidGrid = e.detailRow.find(".grid-SKIDs").kendoGrid({
                        dataSource: getSkidDataSource(), 
                        navigatable: true,
                        columns: getSkidColumns(),
                        sortable: false,
                        filterable: true,
                        resizable: true,
                        editable: true,
                        dataBound: onDataBound,
                        edit: function(e){
                            var input = e.container.find(".k-input");
                            
                            if (e.container.find('.k-numerictextbox').length > 0) {
                                input.addClass("kndy-text-right");
                                input.on('focus',function() {
                                    var that = $(this);
                                    setTimeout(function() {
                                        if (!kendo.support.browser.safari) {
                                            that.select();
                                        }
                                    });
                                });
                                input.focus();
                            }
                        
                            $.proxy(KenandyErp.KendoGridActions.Edit,{ referenceFields: skidReferenceFields });
                        }
                    }).data('kendoGrid');
                    
                    skidGrid.bind('edit',$.proxy(WorkOrderUtil.OnDeKitEdit,{ grid: skidGrid }));
                    
                    skidGrid.wrapper.on("click","." + serialsButtonClass,$.proxy(WorkOrderUtil.ManageSerials,{ grid: skidGrid,dateFields: skidDateFields,serialFieldList: serialFieldList }));
                    
                    KenandyErp.KendoGridOptions.BindEvents(skidGrid,buttons,{ referenceFields: skidReferenceFields });
                },
                
                Populate: function(e) {
                    this.grid.expandRow(this.grid.tbody.find('tr.k-master-row'));
                    $.each(this.grid.dataSource.data(),function(idx,item) {
                       	       
                        $.each(WorkOrderUtil.GetDetailListById(item.uid),function(sidx,swItem) {
	                        swItem.skid.Quantity_to_Issue__c = swItem.skid.Quantity__c;
                        });
                    });

                    this.grid.refresh();
                    this.grid.expandRow(this.grid.tbody.find('tr.k-master-row'));
                },
                
                GenerateSerialGrid: function(e){
                    
                    var self = this;
                    var gridClassName = self.gridClassName;
                    var gridWindowName = self.gridWindowName;
                    var serialFieldList = self.serialFieldList;
                    var quantity = self.quantity;
                    var dataItem = self.dataItem;
                    var serialWrapperUid = self.serialWrapperUid;
                    var buttons = self.buttons;
                    var okButtonDivId = self.okButtonDivId;
                    var okButtonId = self.okButtonId;
                    var qtySkidId = dataItem.skid.Id;
                    var serialReferenceFields = KenandyErp.KendoGridOptions.GetReferenceFields(JSON.parse(JSON.stringify(serialFieldList)));
                    buttons.push([KenandyErp.KendoGridOptions.CommandType.Search]);
                    
                    
                   
                    
                      if ($(gridClassName).data('kendoGrid')) {
                        $(gridClassName).data('kendoGrid').destroy();
                        $(gridClassName).empty();
                    }
                    
                    var serialList =WorkOrderUtil.GetSerialListById(serialWrapperUid);
                    
                    if (serialList.length == 0 && dataItem.serialList && dataItem.serialList.length > 0) {
                        serialList = JSON.parse(JSON.stringify(dataItem.serialList));
                    }
                    if (!serialList) serialList = [];
                    
                    var serialLength = serialList.length;
                    for (var i = 0; i< serialList.length; i++) {
                        var serial = serialList[i];
                        
                        if (!serial.SerialName) {    
                            serial.SerialName = { };
                        }
                        
                        if ((serial.SerialName.Name === undefined) && serial.Name) {
                            serial.SerialName.Name = serial.Name;
                        }
                        
                        if ((serial.SerialName.Id === undefined) && serial.Id) {
                            serial.SerialName.Id = serial.Id;
                        }
                    }
                    
                   
                    var checkAll = false;
                    var Quantity = dataItem.skid.Quantity_to_Issue__c;
                    var determineTotal = function(){
                        return serialList.length;
                    }
                    
                    if (serialList.length == Quantity) {
                        checkAll = true;
                    }
                    
                    var dataBoundSerial = function(){
                        try {
                            record = 0;
                        }
                        catch (e) {
                        }
                        
                    }

                    var config = self.config;
                    
                    var getSerialModel = function() {
                        var fields = KenandyErp.KendoGridOptions.GetFields(serialFieldList); 
                        fields.IsSelected__custom = { type: "boolean" };
                        var model = kendo.data.Model.define({ id: "Id", fields: fields });
                                
                        return model;
                    };
                            
                    
                    
                    var getSerialColumns = function() {
                        var lookupSearchFilters = [];
                        if (qtySkidId) {
                            lookupSearchFilters.push({ field: "SerialNameId", filter: "SKID__c = \'" + qtySkidId + "\'" });
                        } else {
                            lookupSearchFilters.push({ field: "SerialNameId", filter: "Name = \'" + qtySkidId + "\'"});
                        }
                        
                        var columns = KenandyErp.KendoGridOptions.GetColumns(self.serialFieldList,{ lookupSearchAction: '{!$RemoteAction.WorkOrderDeKitExtV2.lookupSearchFilter}',lookupSearchFilters: lookupSearchFilters,validateLookupOnBlur: true});
                        columns[0].template = "#= renderRecordNumber() #";
                        columns.unshift({ field: 'IsSelected__custom',filterable: false,sortable: false,template: "<input type='checkbox' data-bind='IsSelected__custom' #= IsSelected__custom ? checked='checked' : '' # class='grid-select-one' />",headerTemplate: "<input type='checkbox' class='grid-select-all' />",width: 30,attributes: { class: 'kndy-text-left' },headerAttributes: { class: 'kndy-text-left' }});
                        return columns;
                    };
                   
                    
                    var getSerialToolbarButtons = function() {
                        return KenandyErp.KendoGridOptions.GetToolbarButtons(buttons);
                    };
                    
                    var getSerialDataSource = function() {
                        var dataSource = new kendo.data.DataSource({
                            data: serialList,
                            batch: true,
                            pageSize: 10,
                            serverPaging: false,
                            schema: {
                                model: getSerialModel(),
                                total: determineTotal,
                                parse: function(response) {
                                    $.each(response,function(i, item) {
                                        item = Serializer.ConvertFromSFDCDate(item, { dateFields: KenandyErp.KendoGridOptions.GetDateFields(serialFieldList) });
                                    });
                                    return response;
                                }
                            },
                            change: function() {
                                WorkOrderUtil.UpdateSerialList(serialWrapperUid, this.data());
                                
                            }           
                        });
            
                        return dataSource;
                    };
                    
                    // Window initialization
                    if (!serialWindow || ("."+serialWindow.element.attr('class').split(' ')[0] != gridWindowName)) {
                        serialWindow = $(gridWindowName).kendoWindow({
                            title    : "Serial",
                            resizable: false,
                            modal    : true,
                            visible  : false,
                            content  : {
                                
                            }
                        }).data("kendoWindow");
                    }
                    
                    serialGrid = $(gridClassName).kendoGrid({
                        dataSource: getSerialDataSource(), 
                        navigatable: true,
                        pageable: { 
                            input: true,
                            numeric: false, 
                            pageSizes: KenandyErp.KendoGridOptions.PageSizes ,
                        },
                        toolbar: getSerialToolbarButtons(),
                        edit: function(e) {
                           if( gridClassName == '.grid-serial-lines' || gridClassName == '.grid-scrap-serial-lines'){ 
                                
                                var originalSerialName = e.model.Name;
                                
                                $(gridClassName+' input.k-textbox[data-title="Serial Name"]').blur(function (e) {
                                    var changedSerialName = this.value;
                                    
                                    if( originalSerialName != changedSerialName ){
                                        var data = _.filter(serialData, function(item) {return item.Id.indexOf("Selected"+originalSerialName)>-1; }); 
                                        if( data.length > 0 ){
                                            $.each(data, function(index, dataElem) {
                                                var idVar = dataElem.Id.split("Selected")[0]; 
                                                var idData = _.where(serialData, {Id: idVar});
                                                if(idData.length > 0){
                                                    idData[0].serialList.push.apply(idData[0].serialList, data[0].serialList);
                                                    serialData = _.filter(serialData, function(item) {return item.Id.indexOf(dataElem.Id)<0;});
                                                }
                                            });
                                        }
                                    }
                                });
                           }
                        },
                        columns: getSerialColumns(),
                        sortable: true,
                        filterable: true,
                        resizable: true,
                        editable: true,
                        dataBinding: function() {
                            record = (this.dataSource.page() -1) * this.dataSource.pageSize();
                            
                            if (checkAll) {
                                var isAnyUncheckedList = $.grep(this.dataSource.data(),function(e) { return e.IsSelected__custom == false; });
                                if (isAnyUncheckedList.length === 0) {
                                    $.each(this.dataSource.data(),function() {
                                        this['IsSelected__custom'] = true;
                                    });
                                    $(".grid-select-all").prop('checked', true);
                                }
                            }
                        },
                        dataBound: function(e) {
                            record = 0;
                        }
                        //dataBound: dataBoundSerial
                    }).data('kendoGrid');
                    
                    if ( showSerialTopBar ) {
                        $(gridClassName).prepend('<div class="'+ gridClassName.replace('.','') + '-pager'+'"/>');
                        $(gridClassName + '-pager').kendoPager({
                            dataSource: serialGrid.dataSource,
                            pageSizes: [10, 25, 50, 100, 200],
                            input: true,
                            numeric: false
                        });
                    }
                    
                    // bind click events to the custom buttons
                    KenandyErp.KendoGridOptions.BindEvents(serialGrid, buttons, 
                        { 
                            referenceFields: serialReferenceFields
                        }
                    );
                    serialGrid.thead.on("change",".grid-select-all",$.proxy(KenandyErp.KendoGridActions.SelectAll,{ grid: serialGrid }));
                    serialGrid.tbody.on("change",".grid-select-one",$.proxy(KenandyErp.KendoGridActions.Select,{ grid: serialGrid }));
                    serialGrid.bind('edit', $.proxy(WorkOrderUtil.EditSerials, { grid: serialGrid }));
                    
                    if (!($(".grid-select-one").is(":checked"))) {
                        serialGrid.thead.find('.grid-select-all').prop('checked',checkAll);
                        serialGrid.thead.find('.grid-select-all').trigger('change');
                    }
                    
                   
                },
                
                EditSerials: function(e) {
		   			var self = this;
		   			var grid = self.grid;
		   			var row = e.container.closest('tr');
                    var dataItem = this.grid.dataItem(row);
                    var fieldName = e.container.find("input").length > 0 && e.container.find("input").attr("name") ? e.container.find("input").attr("name").toLowerCase(): '';
                    
                    if(fieldName != "serialnameid" && (!dataItem.IsSelected__custom)){
                        e.sender.closeCell();
                    }
		   			
		   			var serialFieldList = '{!JSENCODE(serialFieldList)}';
            	    $(e.container).find('input[name="SerialNameId"]').bind('blur',
	            		$.proxy(KenandyErp.RefreshSerialAttributes, { grid: grid, serialFieldList: serialFieldList,namespace: '{!NamespaceUU}',  refreshAction:'{!$RemoteAction.WorkOrderDeKitExtV2.refreshSerialAttr}' })
            	    );
            	    
            	    
                },
                                
                ManageSerials: function(e) {
                    
                    
                    var gridClassName = '.grid-serial-lines';
                    var gridScrapClassName = '.grid-scrap-serial-lines';
                    var gridWindowClassName ='.grid-assembly-window';
                    var self = this;
                    var grid = self.grid;
                    var buttons = [KenandyErp.KendoGridOptions.CommandType.Search];
                    var row = $(e.target).closest("tr"); //get the row
                    var dataItem = grid.dataItem(row); // get the row data
                    var serialFieldList = self.serialFieldList;
                    
                    if(dataItem.skid.Quantity_to_Issue__c == null){
                        dataItem.skid.Quantity_to_Issue__c = 0;
                    }
                    
                    if(dataItem.skid.Quantity_to_Scrap__c == null){
                        dataItem.skid.Quantity_to_Scrap__c = 0;
                    }
                    var serialAttributes = JSON.parse('{!JSENCODE(serialAttributes)}');
                    
                    var serialFields = JSON.parse(JSON.stringify(self.serialFieldList));
                    var i = serialFields.length;
                    while (i--) {
                        if ((_.contains(serialAttributes, serialFields[i].field.toLowerCase()))
                            && ((!dataItem.skid.Item__r.Item_Attribute__r) 
                            || (dataItem.skid.Item__r.Item_Attribute__r[serialFields[i].field] ===false))) {
                            serialFields.splice(i,1);
                        }
                    }
                    
                    var DekitQuantity = Number(dataItem.skid.Quantity_to_Issue__c);
                    var ScrapQuantity = Number(dataItem.skid.Quantity_to_Scrap__c);
                    var Quantity = Number(dataItem.skid.Quantity_to_Issue__c) + Number(dataItem.skid.Quantity_to_Scrap__c);
                    if(!(Quantity > 0)){
                        KenandyErp.Alert( 'Please Enter a positive  quantity to enter serial numbers!');
                        return;
                    }
                    
                    $('#tabstrip').show();
                    
                    var serialWrapperUid = dataItem.skid.Temporary_Value_Holder__c;
                    if(!serialWrapperUid){
                        serialWrapperUid = kendo.guid();
                    }
                    if(gridClassName == '.grid-serial-lines'){
                        assemblyWrapperUid = serialWrapperUid;
                    }
                    dataItem.skid.Temporary_Value_Holder__c = serialWrapperUid;
                    
                    var serialWrappers = grid.dataSource.data();
                    /*if (serialWrappers.length == 1) {
                        var serialsToAdd = [ ];
                        $.each(serialWrappers[0].serialList,function(i,val) {
                            if (i < Quantity) {
                                if (val.hasOwnProperty('attributes'))
                                    delete val['attributes'];
                                serialsToAdd.push(val);
                            }
                        });
                        WorkOrderUtil.UpdateSerialList(serialWrapperUid+'Dekit',serialsToAdd);
                        WorkOrderUtil.UpdateSerialList(serialWrapperUid+'Scrap',serialsToAdd);
                    }*/
                    
                    
                    var dekitProxy = $.proxy(WorkOrderUtil.GenerateSerialGrid, { gridClassName: '.grid-serial-lines', gridWindowName:'.grid-window' , serialFieldList: serialFields, quantity: DekitQuantity, 
                                dataItem: dataItem, serialWrapperUid: serialWrapperUid+'Dekit', buttons: [] , okButtonDivId: 'okayDiv', okButtonId: 'okayButton' });
                                
                    var scrapProxy = $.proxy(WorkOrderUtil.GenerateSerialGrid, { gridClassName: '.grid-scrap-serial-lines', gridWindowName:'.grid-window' , serialFieldList: serialFields, quantity: ScrapQuantity, 
                                dataItem: dataItem, serialWrapperUid: serialWrapperUid+'Scrap', buttons: [] , okButtonDivId: 'okayDiv', okButtonId: 'okayButton' });            
                    
                    dekitProxy();
                    scrapProxy();
                    
                    serialWindow.open().center();
                },
                
                GetSerialListById: function(id) {
                    var data = _.where(serialData, {Id: id});
                    var serialList = [];
                    
                    if (data.length > 0) {
                        serialList = data[0].serialList;
                    }
                    
                    return serialList ;
                },
                
                GetSerialListContainsId: function(id) {
                    var data = _.filter(serialData, function(item) {
                                    return item.Id.indexOf(id)>-1; 
                                });
                    var serialList = [];
                    
                    $.each(data, function(index, dataElem) {
                        serialList = serialList.concat.apply(serialList,dataElem.serialList);
                        
                        $.each(dataElem.serialList, function() {
                            this.Temporary_Value_Holder__c = dataElem.Id;
                        });
                    });
                    
                    return serialList;
                },
                
                UpdateSerialList: function(id,serialList) {
                    var found = false;
                    
                    $.each(serialData, function() {
                        if (this.Id == id) {
                            this.serialList = serialList;
                            found = true;
                            return false;
                        }
                    });
                    
                    if (!found) {
                        serialData.push({ Id: id, serialList: serialList });
                    }
                },
                
                
                
                
                Save: function(e) {
                    var self = this;
                    var grid = self.grid;
                    var messageElement = $(".page-message");
                    
                    KenandyErp.ClearMessage( messageElement);

                    var mtDateFields = self.mtDateFields;
                    var skidDateFields = self.skidDateFields;
                    
                    var currentData = grid.dataSource.data();
                    var woRecordId='{!Work_Order__c.Id}';
                    var columns = grid.columns;
                    
                    var updatedRows = { };
                    
                    var kData = grid.dataSource.data();
                    var skMap = { };
                    var errorMessage = '';
                    var negativeError = '';
                    
                    $.each(kData,function(idx,item) {
                        $.each(WorkOrderUtil.GetDetailListById(item.uid),function(sidx,swItem) {
	                            if (swItem.skid.Quantity_to_Issue__c < 0 || swItem.skid.Quantity_to_Scrap__c < 0 ) {
                                    negativeError += item.material.Name + ': Cannot return or Scrap a negative quantity\n';
	                            } 
                              
                        });
                    });
                    
                    if (negativeError.length > 0) {
                        KenandyErp.Message(negativeError,KenandyErp.MessageType.Error,messageElement);
                        return;
                    }
                    
                    updatedRows = $.map(currentData,function(item,index) {
                        var dekitRows = WorkOrderUtil.GetDetailListById(item.uid);
                        
                        if (dekitRows.length === 0 && item.serialWrapperList.length > 0) {
                            $.each(item.serialWrapperList,function(a,b) {
                                dekitRows.push(b);    
                            });
                        } 
                         
                        var serialWrapperList = $.map(dekitRows,function(serialWrapper,index) {
                            
                            if (serialWrapper.skid.Quantity_to_Issue__c > 0 || serialWrapper.skid.Quantity_to_Scrap__c > 0) {
                                var isNewRow = !serialWrapper.get("Id");   
                                var serialWrapperUid = serialWrapper.skid.Temporary_Value_Holder__c;
                                
                                var serials = WorkOrderUtil.GetSerialListById(serialWrapperUid+'Dekit') ;
                                var serialsScrap = WorkOrderUtil.GetSerialListById(serialWrapperUid+'Scrap') ;
                               
                                serials = $.map(serials, function(serialItem, index) {
                                    serialItem.Temporary_Value_Holder__c = 'Dekit';
                                    return serialItem;
                               });
                                serialsScrap = $.map(serialsScrap, function(serialItem, index) {
                                    serialItem.Temporary_Value_Holder__c = 'Scrap';
                                    return serialItem;
                               });
                                
                                var checkallserials = false;
                                /*if(serialWrapper.serialList && serialWrapper.serialList.length == serialWrapper.skid.Quantity_to_Scrap__c && serialsScrap.length == 0 && !(serialWrapper.skid.Quantity_to_Issue__c > 0)){
                                    serialsScrap = serialWrapper.serialList;
                       				checkallserials = true;
                                    }
                                if (serialWrapper.serialList && serialWrapper.serialList.length == serialWrapper.skid.Quantity_to_Issue__c && serials.length == 0 && !(serialWrapper.skid.Quantity_to_Scrap__c > 0)) {
                                    
                       				serials = serialWrapper.serialList;
                       				checkallserials = true;
                   				}*/
                              
                   				$.each(serialsScrap,function(i,serial){
                                  serials.push(serial);   
                                });
                                 
                                var serialList = $.map(serials,function(serialItem,index) {
                                   
                                    if (!serialItem['SerialName']) {
                                        serialItem.SerialName = { };
                                        serialItem.SerialName.Id = serialItem.Id;
                                        serialItem.SerialName.Name = serialItem.Name;
                                    }
                                    
                                    if ((serialItem['SerialName']) && (serialItem.SerialName.Name) && (!!serialItem.SerialName.Name.trim()) && ((serialItem.IsSelected__custom) || (checkallserials))) {
                                        serialItem.Name = serialItem.SerialName.Name;
                                        serialItem.Id = serialItem.SerialName.Id;
                                        if (serialItem.hasOwnProperty("SerialName")) {
                                            delete serialItem['SerialName'];
                                        }
                                        if (serialItem.hasOwnProperty("SerialNameId")) {
                                            delete serialItem['SerialNameId'];
                                        }
                                        delete serialItem[""];
                                    
                                        serialItem = serialItem.toJSON();
                                        delete serialItem[""];
                                        return serialItem;
                                    } else {
                                        return null;
                                    }
                                });
                                
                                serialWrapper = serialWrapper.toJSON();

                                if (serialWrapper.skid.Quantity_to_Scrap__c > 0) {
                                    if (serialWrapper.skid.ScrapLocation__c) {
                                        serialWrapper.skid.Temporary_Value_Holder1__c = serialWrapper.skid.ScrapLocation__c;
                                    } else {
                                        serialWrapper.skid.Temporary_Value_Holder1__c = "null";
                                    }

                                    serialWrapper.skid.Temporary_Value_Holder1__c += ",";

                                    if (serialWrapper.skid.ScrapBin__c) {
                                        serialWrapper.skid.Temporary_Value_Holder1__c += serialWrapper.skid.ScrapBin__c;
                                    } else {
                                        serialWrapper.skid.Temporary_Value_Holder1__c += "null";
                                    }
                                }

                                serialWrapper = Serializer.ConvertToSFDCDate(serialWrapper,{ dateFields: skidDateFields });
                                serialWrapper.serialList = serialList;
                                delete serialWrapper.skid.Serials__r;
                                delete serialWrapper.skid.ScrapLocation__c;
                                delete serialWrapper.skid.ScrapBin__c;
                                delete serialWrapper.skid.ScrapLocation__r;
                                delete serialWrapper.skid.ScrapBin__r;
                                
                                $.each(item.skidFields, function(j, fld) {
                                    delete serialWrapper[fld.field];
                                });
                                
                                if (isNewRow) {
                                    delete serialWrapper.Id;
                                }
                                return serialWrapper;
                            } else {
                                return null;
                            }
                        });
                        
                        if (serialWrapperList.length > 0) {
                            item = item.toJSON();
                            item = Serializer.ConvertToSFDCDate(item,{ dateFields: mtDateFields });
                            item.serialWrapperList = serialWrapperList;
                            
                            for (var i = 0; i < columns.length; i++) {
                                var name = columns[i].field;
                                delete item[name];
                            }
                            
                            return item;
                        }
                    });
                    
                    if (updatedRows.length === 0) {
                        KenandyErp.Message("{!$Label.No_records_changed}",KenandyErp.MessageType.Info,messageElement);
                        return;
                    }

                    if (updatedRows.length > 0) {
                        updatedRows = Serializer.ParameterMap(updatedRows,{ isDml: false });
                    }

                    KenandyErp.BlockUI(grid.element);
                    $('.go-back').toggleClass('btnDisabled',true).prop('disabled',true);
                    
                    var mDateFields = mtDateFields ? _.pluck(mtDateFields,KenandyErp.KendoGridOptions.FieldInfo.Field) : null;
                    var dDateFields = skidDateFields ? _.pluck(skidDateFields,KenandyErp.KendoGridOptions.FieldInfo.Field) : null;

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.WorkOrderDeKitExtV2.save}',
                        '{!workOrder.Id}',
                        updatedRows,
                        mDateFields,
                        dDateFields,
                        function(result, event) {
                            $('.save-command').toggleClass('btnDisabled',false).prop('disabled',false);
                            $('.go-back').toggleClass('btnDisabled',false).prop('disabled',false);
                            
                            KenandyErp.UnBlockUI(grid.element);

                            if (event.type == 'exception') {
                                KenandyErp.Message(event.message,KenandyErp.MessageType.Error,messageElement);
                            } else if (result.success) {
                                KenandyErp.NavigateToSObject(woRecordId,'detail');
                            } else {
                                KenandyErp.Messages(result.messages,messageElement);
                            }
                        },
                        { escape: false }
                    );
                    
                    
                    
                },
                
                OnDeKitEdit: function(e) {
                    var grid = this.grid;
                    var sw = grid.dataItem(e.container.closest("tr"));
                    var material = DekitGrid.dataItem(e.container.closest(".k-detail-row").prev());

                    var fieldName;
                    if (e.container.find("input[data-role=numerictextbox]").length > 0) {
                        fieldName = e.container.find("input[data-role=numerictextbox]").length > 0 ? e.container.find("input[data-role=numerictextbox]").attr("name").toLowerCase() : '';
                    } else {
                        fieldName = e.container.find("input").length > 0 && e.container.find("input").attr("name") ? e.container.find("input").attr("name") : '';
                    }
                    fieldName = fieldName ? fieldName.toLowerCase() : fieldName;

                    $(e.container).find('input[name="skid.Location__c"]').bind("blur", $.proxy(WorkOrderUtil.RefreshTrackedAttributes, { grid: grid, sw: sw }));
                    $(e.container).find('input[name="skid.ScrapLocation__c"]').bind("blur", $.proxy(WorkOrderUtil.RefreshTrackedAttributes, { grid: grid, sw: sw }));

                    if ((fieldName == "skid.location__c" && material.Type__c == "Repair") || ((fieldName == "skid.bin__c" || fieldName == "skid.scrapbin__c") && $.inArray(fieldName,sw.trackedAttributes) == -1)) {
                        e.sender.closeCell();
                    }
                },
                
                RefreshTrackedAttributes: function(e) {
                    var grid = this.grid;
                    var sw = this.sw;
                    var messageElement = grid.element.closest("div.grid-container").find("div.grid-message");

                    var binIndex = sw.trackedAttributes.indexOf("skid.bin__c");
                    var scrapBinIndex = sw.trackedAttributes.indexOf("skid.scrapbin__c");
                    if (binIndex > -1) {
                        sw.trackedAttributes.splice(binIndex,1);
                    }
                    if (scrapBinIndex > -1) {
                        sw.trackedAttributes.splice(scrapBinIndex,1);
                    }
                        
                    if (!sw.skid.Location__c) {
                        delete sw.skid.Bin__c;
                        delete sw.skid.Bin__r;
                    }
                        
                    if (!sw.skid.ScrapLocation__c) {
                        delete sw.skid.ScrapBin__c;
                        delete sw.skid.ScrapBin__r;
                    }

                    if (!sw.skid.Location__c && !sw.skid.ScrapLocation__c) {
                        grid.refresh();
                        return;
                    }

                    KenandyErp.BlockUI(grid.element);

                    Visualforce.remoting.Manager.invokeAction(
                        "{!$RemoteAction.WorkOrderDeKitExtV2.getLocations}",
                        sw.skid.Location__c ? sw.skid.Location__c : null,
                        sw.skid.ScrapLocation__c ? sw.skid.ScrapLocation__c : null,
                        function(result,event) {
                            KenandyErp.UnBlockUI(grid.element);

                            if (event.type == 'exception') {
                                KenandyErp.Message(event.message,KenandyErp.MessageType.Error,messageElement);
                            } else if (result.success) {
                                KenandyErp.CleanNamespace(result.records,"{!namespaceUU}");

                                $.each(result.records,function(i,location) {
                                    if (location.Id == sw.skid.Location__c) {
                                        sw.skid.Location__r = location;

                                        if (location.Bin_Tracked__c) {
                                            sw.trackedAttributes.push("skid.bin__c");
                                        } else {
                                            delete sw.skid.Bin__c;
                                            delete sw.skid.Bin__r;
                                        }
                                    }

                                    if (location.Id == sw.skid.ScrapLocation__c) {
                                        sw.skid.ScrapLocation__r = location;

                                        if (location.Bin_Tracked__c) {
                                            sw.trackedAttributes.push("skid.scrapbin__c");
                                        } else {
                                            delete sw.skid.ScrapBin__c;
                                            delete sw.skid.ScrapBin__r;
                                        }
                                    }
                                });

                                grid.refresh();
                            } else {
                                KenandyErp.Messages(result.messages,messageElement);
                            }
                        },
                        { escape: false }
                    );
                },
                
                UpdateSkidList: function(id,serialWrapperList) {
                    var found = false;
                    
                    $.each(skidData,function() {
                        if (this.Id == id) {
                            this.serialWrapperList = serialWrapperList;
                            found = true;
                            return false;
                        }
                    });
                    
                    if (!found) {
                        skidData.push({ Id: id,serialWrapperList: serialWrapperList });
                    }
                },
                
                GetDetailListById: function(id) {
                    var data = _.where(skidData,{ Id: id });
                    var serialWrapperList = [];
                    
                    if (data.length > 0) {
                        serialWrapperList = data[0].serialWrapperList;
                    }
                    
                    return serialWrapperList;
                },
                
                GetSerialListContainsId: function(id) {
                    var data = _.filter(serialData,function(item) {
                        return item.Id.indexOf(id) > -1; 
                    });
                    var serialList = [];
                    
                    $.each(data,function(index,dataElem) {
                        serialList = serialList.concat.apply(serialList,dataElem.serialList);
                        
                        $.each(dataElem.serialList,function() {
                            this.Temporary_Value_Holder__c = dataElem.Id;
                        });
                    });
                    
                    return serialList;
                },
                
                GetSerialListById: function(id) {
                    var data = _.where(serialData,{ Id: id });
                    var serialList = [];
                    
                    if (data.length > 0) {
                        serialList = data[0].serialList;
                    }
                    
                    return serialList;
                },
                
                RestoreExpandedRows: function(grid) {
                    for (var i = 0; i < expandedRows.length; i++) {
                        grid.expandRow('tr[data-uid="' + expandedRows[i] + '"]');
                    }
                },
                
                DetailExpand: function(e) {
                    var self = this;
                    var grid = self.grid;
                    var masterDataItem = grid.dataItem(e.masterRow);
                    expandedRows.push(masterDataItem.uid);
                },
                
                DetailCollapse: function(e) {
                    var self = this;
                    var grid = self.grid;
                    var masterDataItem = grid.dataItem(e.masterRow);
                    expandedRows.pop(masterDataItem.uid);
                },
                
                ExpandRows: function(e) {
                    expandedRows = [];
                    var grid = this.grid;
                    grid.expandRow(grid.tbody.find("tr.k-master-row"));
                },
                
                CollapseRows: function(e) {
                    expandedRows = [];
                    var grid = this.grid;
                    grid.collapseRow(grid.tbody.find("tr.k-master-row"));
                },
            };
        }();
</script>
<script type="text/x-kendo-template" id="detailTemplate">
        <div class="grid-container grid-detail-container k-block k-info-colored">
            <div class="grid-SKID-message" />
            <div class="grid-SKIDs" />
        </div>
</script>
</apex:page>
