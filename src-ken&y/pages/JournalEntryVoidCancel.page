<apex:page standardController="Journal_Entry__c" extensions="JournalEntryVoidCancelExt">
    <apex:sectionHeader title="Void/Cancel" subtitle="{!Journal_Entry__c.Name}"/>
    <c:busyWait /> 
    <c:KendoResources />
    <apex:includeScript value="{!$Resource.GridRelatedListJS}" />
    <apex:form id="form">
          <div id="MessagesBlock">  
              <apex:pagemessages id="pgMessage" />                
              <div class="page-message"></div>
          </div>
        
        <apex:pageBlock >
            <apex:pageBlockButtons location="top">
            <apex:commandButton value="Return to {!Journal_Entry__c.Name}" action="{!cancel}" status="actionStatus" rerender="form"/>
                <apex:commandButton id="voidBtn" value="Void {!Journal_Entry__c.Name}" disabled="{!disableVoid || AlreadyVoided}" action="{!prepreVoid}" rerender="jsPanel" onclick="KenandyErp.BlockUI();" oncomplete="showProgressBar();" />
                <apex:commandButton value="Cancel {!Journal_Entry__c.Name}" disabled="{!disableCancel }" action="{!cancelDocs}" status="actionStatus" rerender="form"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection >
                <apex:repeat value="{!$ObjectType.Journal_Entry__c.FieldSets.Void}" var="v">
                    <apex:outputField value="{!Journal_Entry__c[v]}"/>
                </apex:repeat> 
                <apex:outputText value=""/>
                <apex:inputField value="{!Journal_Entry__c.Void_Date__c}" id="voidDateEdit" required="true" rendered="{!Not(disableVoid || AlreadyVoided)}"/>
                <apex:outputField value="{!Journal_Entry__c.Void_Date__c}" rendered="{!disableVoid || AlreadyVoided}" id="voidDateOutput"/>
            </apex:pageBlockSection>
            <div id="tab" >
            <apex:pageBlockSection >
                <apex:pageBlockSection title="Void Details" columns="1">
                    <apex:pageBlockTable value="{!voidCancelDetails.voidMessages}" var="msg">
                        <apex:column >
                            <apex:outputText value="{!msg}"/>
                        </apex:column>
                    </apex:pageBlockTable>
                </apex:pageBlockSection>
                <apex:pageBlockSection title="Cancel Details" columns="1">
                    <apex:pageBlockTable value="{!voidCancelDetails.cancelMessages}" var="msg">
                        <apex:column >
                            <apex:outputText value="{!msg}"/>
                        </apex:column>
                    </apex:pageBlockTable>
                </apex:pageBlockSection>
            </apex:pageBlockSection>    
        </div>
        <table class="kndy-table">
            <tr>
                <td align="center">
                    <div id="ProgressBar" ></div>
                </td>
            </tr>
        </table>
        </apex:pageBlock>
       </apex:form>
    <script>
       Visualforce.remoting.timeout = 120000; // Set timeout at page level
       
       var namespace = '{!namespace}';
       var headerDateFields = [
            { field: "Transaction_Date__c", fieldtype: "datetime"},
            { field: "Finalized_Date__c", fieldtype: "datetime"},
            { field: "Posting_Date__c", fieldtype: "datetime"},
            { field: "Void_Date__c", fieldtype: "datetime"}
        ];
        var revChunks = '';//serialized map of the AutoNumReverseChunks
        var voidAEId='';
        var voidDateTime;
        var tranDateTime;        
        var doVoid = true;
        var revSize='';
        var RemoteDeferredReverse = [];
        var pb;
        var AELineCount;
        var deferredReverse = $.Deferred();
        var Progress = 0;
        var voidJE = [];
        var guid= '';
        var AlreadyVoided = false;
        var numberOfRetries=1;
        var realtimeRetriesReversal=new Array();

        function unblockUi(){
            KenandyErp.UnBlockUI();
            $("[id$='voidBtn']").toggleClass('btnDisabled', true).attr('disabled', 'disabled');        
            $("[id$='voidDateEdit']").toggleClass('btnDisabled', true).attr('disabled', 'disabled');        
        }
//        var stopRetry = '';

          /*Do a retry for the failed chunk in case of transaction timeouts*/
        function checkRetry(event) {
            var doRetry = false;
            if (event.type === 'exception') {
                if ((event.message.indexOf("timeout") > -1) ||
                    (event.message.indexOf("Remoting request invalid for your session") > -1) || 
                    (event.message.indexOf("Logged in") > -1)) {
                    doRetry = true; 
                }   
            }  
            return doRetry;     
        }      
    

        function showProgressBar() {
            debugger;
            var vd = new Date($('input[id$="voidDateEdit"]').val());
            if(AlreadyVoided == "true"){
                KenandyErp.Message('Document Already Voided.', KenandyErp.MessageType.Info);
                unblockUi();
                $('span[id$="pgMessage"]').css('display','none');
            }else if(vd == 'Invalid Date'){
                KenandyErp.Message('The Void date format is invalid.', KenandyErp.MessageType.Error);
                KenandyErp.UnBlockUI();
                $('span[id$="pgMessage"]').css('display','none');
           
            }else {
                if(revSize == 0){
                    debugger;
                    Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.JournalEntryVoidCancelExt.VoidWithoutAEL}',
                     voidAEId,
                     guid,
                     function (result, event) {
                         if (result.AllDone==true){
                            debugger;
                            var headerRowsList = [];
                            var headerRows = [];
                             
                            headerRowsList.push(voidJE);
                             
                            headerRows = $.map(headerRowsList, function(item, index) {
                                delete item['attributes'];                      
                                item = Serializer.ConvertToSFDCDate(item, { dateFields: headerDateFields });
                                 
                                return item;
                            });
                             
                            if (headerRows.length > 0) {
                                headerRows = Serializer.ParameterMap(headerRows);
                            }
                             
                            Visualforce.remoting.Manager.invokeAction(
                                 '{!$RemoteAction.JournalEntryVoidCancelExt.ActualVoidSD}',
                                 headerRows, 
                                 guid,
                                 function (result, event) {
                                     if (result.AllDone==true){
                                         KenandyErp.Message('Document Successfully Voided.', KenandyErp.MessageType.Info);
                						 $('span[id$="pgMessage"]').css('display','none');
                                         unblockUi();
                                     }
                                     else{
                                         KenandyErp.Message(result.Messages, KenandyErp.MessageType.Error);
                                         KenandyErp.UnBlockUI();
                                     }
                             });
                        }
                        else{
                            KenandyErp.Message(result.Messages, KenandyErp.MessageType.Info);
                            unblockUi()
                        }
                     });
                                                     
                }
                else{
                    $('#tab').hide();
                    var largemsg='The Source Document is being Voided.Please do not refresh page or press Back button of browser';                                                     
                    KenandyErp.Message(largemsg, KenandyErp.MessageType.Info);                                              
                	$('span[id$="pgMessage"]').css('display','none');
                    progressbar(0, AELineCount);
                    reverseAE(0);
                }
            }
        }
        
        function reverseAE(chunkIndex)
        { debugger;
             
                $('#ProgressBar').show();
                var RemoteDeferredItemReverse= $.Deferred();
                var currchunkIndex = chunkIndex;
                var chunkItem=revChunks[currchunkIndex];
                var max=chunkItem['max']; 
                var min=chunkItem['min'];
                voidDateTime = new Date($('input[id$="voidDateEdit"]').val());
            	tranDateTime = new Date("{!Journal_Entry__c.Transaction_Date__c}");

                RemoteDeferredReverse.push(RemoteDeferredItemReverse);  
                console.log('chunks here');
                console.log(revChunks);
                console.log('currchunkIndex');
                console.log(currchunkIndex);
            
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.JournalEntryVoidCancelExt.reverseAEWithDates}',
                            voidAEId, 
                            currchunkIndex,
                            revSize,
                            min,
                            max,
                            doVoid,
                            guid,
                            voidDateTime,
                            tranDateTime,
                            function (result, event) {
                                
                                console.log('Entered VF Reverse');   
                                console.log('Remote result ');
                                console.log(result);                             
                                //console.log('Remote event');      
                                //console.log(event);                            
                               
                                EventObj=Object.create(event);
                                //console.log('My eventObj');      
                                //console.log(EventObj);
                                if(event.status==true)
                                {
    //                                KenandyErp.Message(result.Messages, KenandyErp.MessageType.Info);                               
                                    if(!result.AllDone)
                                    {
                                        Progress=result.Progress;
                                        if(Progress!=-1)
                                            {
                                               if(result.ChunkReverse==true)
                                                    {                                                                                            
                                                        reverseAE(result.NextChunkIndex);
                                                        console.log('Progress'+result.Progress);                                        
                                                    }
                                                else
                                                    {
                                         				KenandyErp.Message(result.Messages, KenandyErp.MessageType.Error);
										                KenandyErp.UnBlockUI();
										                $('span[id$="pgMessage"]').css('display','none');
                                                        $('#tab').show();
                                                        $('#ProgressBar').hide();  
                                                        //some error deleting current current chunk .Displayed in messages.  
                                                    }  
                                            }
                                        else
                                            {
                                                //Some Error 
                                            }
                                         RemoteDeferredItemReverse.resolve(result, event);                                    
                                    }
                                    else if(result.AllDone)
                                    {
                                        Progress=AELineCount-1;
                                        console.log('Reverse Complete');                                         
                                        RemoteDeferredItemReverse.resolve(result, event);      
                                        $.when.apply($, RemoteDeferredReverse).done( function (obj1,obj2)
                                        
                                        {                                                      
                                            deferredReverse.resolve(obj1,obj2);                                              
                                            console.log('deferredDelResolve');                                        
                                            console.log('RemoteDeferredReverse Array');                                              
                                            console.log(RemoteDeferredReverse); 
                                            if(result.ChunkReverse==true)
                                            {
                                               debugger;
                                               var headerRowsList = [];
                                               var headerRows = [];
                                                
                                               headerRowsList.push(voidJE);
                                                
                                                headerRows = $.map(headerRowsList, function(item, index) {
                                                    delete item['attributes'];                      
                                                    item = Serializer.ConvertToSFDCDate(item, { dateFields: headerDateFields });
                                                    
                                                    return item;
                                                });
                                                
                                                if (headerRows.length > 0) {
                                                    headerRows = Serializer.ParameterMap(headerRows);
                                                }

                                                Visualforce.remoting.Manager.invokeAction(
                                                   '{!$RemoteAction.JournalEntryVoidCancelExt.ActualVoidSDWithDates}',
                                                    headerRows,
                                                    guid, 
                                                    voidDateTime,
                                                    function (result, event) {
                                                       if(event.status==true){
                                                        
                                                            if (result.AllDone==true){
                                                                $('#tab').show();
                                                                $('#ProgressBar').hide();
                                                                $('#voidDateEdit').hide(); 
                                                                KenandyErp.Message('Document Successfully Voided.', KenandyErp.MessageType.Info);
                                                                unblockUi();
                												$('span[id$="pgMessage"]').css('display','none');
                                                            }
                                                            else{
                                                                KenandyErp.Message(result.Messages, KenandyErp.MessageType.Error);
                                                                $('#tab').show();
                                                                $('#ProgressBar').hide();  
                                                                KenandyErp.UnBlockUI();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            var isTimeout=checkRetry(event);
                                                            if(isTimeout)
                                                            {   
                                                                for(var i=1; i<=numberOfRetries;i++){
                                                                var ckeckBreak = false;
                                                                    Visualforce.remoting.Manager.invokeAction(
                                                                       '{!$RemoteAction.JournalEntryVoidCancelExt.getstopRetry}',
                                                                        voidAEId, 
                                                                        function (result, event) {
                                                                            if(event.status==true){
                                                                                if(result == true){
                                                                                    KenandyErp.Message('Document Successfully Voided.', KenandyErp.MessageType.Info);
                                                                                    $('#tab').show();
                                                                                    $('#ProgressBar').hide();  
                                                                                    ckeckBreak = true;
                                                                                    unblockUi();
                                                                                }
                                                                            }
                                                                        }
                                                                    );
                                                                    
                                                                    if(ckeckBreak == true){
                                                                        $('#tab').show();
                                                                        $('#ProgressBar').hide();  
                                                                        KenandyErp.Message('Document Successfully Voided.', KenandyErp.MessageType.Info);
                                                                        unblockUi();
                                                                        break;
                                                                    }                                                                               
                                                                    Visualforce.remoting.Manager.invokeAction(
                                                                       '{!$RemoteAction.JournalEntryVoidCancelExt.ActualVoidSD}',
                                                                        headerRows,
                                                                        guid, 
                                                                        function (result, event) {
                                                                            if(event.status==true){
                                                                            
                                                                                if (result.AllDone==true){
                                                                                    $('#tab').show();
                                                                                    $('#ProgressBar').hide();  
                                                                                    KenandyErp.Message('Document Successfully Voided.', KenandyErp.MessageType.Info);
                                                                                    unblockUi();
                																	$('span[id$="pgMessage"]').css('display','none');
                                                                                }
                                                                                else{
                                                                                    KenandyErp.Message(result.Messages, KenandyErp.MessageType.Error);
                                                                                    $('#tab').show();
                                                                                    $('#ProgressBar').hide();  
                                                                                    KenandyErp.UnBlockUI();
                                                                                }
                                                                            }
/*                                                                          else{ 
                                                                                if(stopRetry = true){
                                                                                    KenandyErp.Message('Document Successfully Voided.', KenandyErp.MessageType.Info);
                                                                                    $('#tab').show();
                                                                                    $('#ProgressBar').hide();
                                                                                    unblockUi();
                                                                                      
                                                                                }
                                                                                else{
                                                                                    KenandyErp.Message(event.message + 'Actual void', KenandyErp.MessageType.Fatal);
                                                                                    $('#tab').show();
                                                                                    $('#ProgressBar').hide();  
                                                                                }
                                                                            }                       
*/                                                                      }
                                                                    );                                                                                                                                                                                                                                                                  
                                                                }
                                                            }   
                                                        }
                                                        
                                                    }
                                                );
                                                 
                                              } else {
                                                     KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
                                                     unblockUi();
    
                                              }
                                        });                                                                     
                                    }                           
                                }
                                else  //Remoting failure
                                    {
                                                                        
                                        var isTimeout=checkRetry(event);
                                        if(isTimeout)
                                        {
                                            if (currchunkIndex in realtimeRetriesReversal) 
                                            {
                                                realtimeRetriesReversal[currchunkIndex]++;
                                            } 
                                            else 
                                            {
                                                realtimeRetriesReversal[currchunkIndex] = 1;
                                            }
                                            
                                            if (realtimeRetriesReversal[currchunkIndex] <= numberOfRetries) {
                                            
                                                console.log('Inside Void -'+' Current Retry Count:'+realtimeRetriesReversal[currchunkIndex]+', currchunkIndex: '+currchunkIndex+', max:'+ max+', min :'+ min +', curr time: ' + new Date());
                                                RemoteDeferredItemReverse.resolve(result, event);                       
                                                reverseAE(currchunkIndex);
                                                
                                            } 
                                            else {
                                                //we hit our number of retries, time to fail
                                                KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
                                                $('#tab').show();
                                                $('#ProgressBar').hide();  
                                                unblockUi();
                                            }
                                        
                                        }
                                        else
                                        {
                                              KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
                                              $('#tab').show();
                                              $('#ProgressBar').hide();  
                                              KenandyErp.UnBlockUI();
                                        }

                                }
    
                            },
                            {escape: false});
                progressbar(Progress,AELineCount);
                return RemoteDeferredItemReverse.promise();
                                                        
        } 
        
        function progressbar(progressCount,LineCount)
            {
                var exp=LineCount;
                var curr=progressCount;

                if (pb) {
                    pb.value(curr);
                }
                else {
                    pb = $("#ProgressBar").kendoProgressBar({
                        type: "percent",
                        min: 0,
                        max: exp,
                        value: curr,
                        animation: {
                            duration: 200
                        }
                    }).data("kendoProgressBar");
                }
            }
    </script>
    <apex:outputPanel id="jsPanel">
    
    <script>
        revChunks = JSONUtils.Parse('{!reverseChunkMap}');
        voidAEId  = "{!voidAEId}";
        revSize   = "{!reverseSize}";
        AELineCount = "{!AELineCount}";
        voidJE = JSONUtils.Parse('{!voidJESer}');
        guid = "{!guid}";
        numberOfRetries='{!NumberOfRetries}';
        if (voidJE.length > 0) {
            voidJE = voidJE[0];
            KenandyErp.CleanNamespace(voidJE, namespace);
            Serializer.ConvertFromSFDCDate(voidJE, { dateFields: headerDateFields });
        }
        AlreadyVoided = "{!AlreadyVoided}";
        console.log('inside JSPanel');
        console.log('chunks');
        console.log('revChunks');
        console.log(revChunks);
        console.log('voidJE');
        console.log(voidJE);
    </script>
    </apex:outputPanel>
</apex:page>