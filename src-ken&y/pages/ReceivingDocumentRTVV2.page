<apex:page showHeader="true" sidebar="false" extensions="ReceivingDocumentRTVExtV2" standardController="Receiving_Document__c" tabStyle="Receiving_Document__c" docType="html-5.0">
    <c:KendoResources />
    <apex:includeScript value="{!$Resource.GridActionListJS}" />
    
    <apex:form id="theForm">
        <div class="page-container">
            <apex:sectionHeader title="Return to Vendor: {!Receiving_Document__c.Name}" />
            <div class="page-message" />
            <apex:pageMessages id="msgs" />
            
            <apex:pageBlock title="Select Inventory">
                <apex:pageBlockButtons location="top">
                    <apex:outputPanel layout="none">
                        <input type="button" value="Save" class="btn save-command" />
                        <apex:commandButton value="{!$Label.Cancel}" action="{!cancel}" status="actionStatus" accessKey="s"/>
                    </apex:outputPanel>
                </apex:pageBlockButtons>
                
                <div class="grid-container">
                    <div class="grid-message" />
                    <div id="rtvGrid" />
                </div>
                
                <div id="serialWindow" class="grid-window">
                    <div class="grid-container k-block k-info-colored">
                        <div id="serials" class="serialGrid" style="width: {!gridSize}px" />
                    </div>
                </div>
            </apex:pageBlock>
        </div>
    </apex:form>
    
    <script type="text/javascript">
        var serialTracked = {!serialTracked};
        var showSerialTopBar = {!serialShowTopBar};
    
        var expandedRows = [ ];
        
        var skidData = { };
        
        var serialData = { };
        var serialWindow;
        
        var renderRecordNumber = function() {
            return ++record;
        }
        
        var rtvData = function() {
            var deferred = $.Deferred();
            var messageElement = $("#rtvGrid").closest("div.grid-container").find("div.grid-message");

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ReceivingDocumentRTVExtV2.getRTVData}',
                RTVUtil.receivingDocument.Id,
                function(result,event) {
                    if (event.type == 'exception') {
                        KenandyErp.Message(event.message,KenandyErp.MessageType.Error,messageElement);
                    } else if (result.success && result.records.length > 0){
                        KenandyErp.Messages(result.messages,messageElement);
                        deferred.resolve(result,event);
                    } else {
                        KenandyErp.Messages(result.messages,messageElement);
                        KenandyErp.UnBlockUI($("#rtvGrid"));
                    }
                },
                { escape: false }
            );
            return deferred.promise();
        };
        
        $(document).on('KenandyErpReady', function(e) {
            KenandyErp.KendoGridOptions.DefaultPageSize = KenandyErp.KendoGridOptions.PageSizes[0];
            
            RTVUtil.Init({
                receivingDocument: '{!JSENCODE(receivingDocumentJSON)}',
            
                receiptLineFieldList: '{!JSENCODE(receiptLineFieldListJSON)}',
                rtvGridConfig: '{!JSENCODE(rtvGridConfigJSON)}',
                
                skidFieldList: '{!JSENCODE(skidFieldListJSON)}',
                
                serialFieldList: '{!JSENCODE(serialFieldListJSON)}'
            });
        });
        
        var RTVUtil = function() {
            return {
                receivingDocument: null,
            
                receiptLineFieldList: null,
                rtvGridConfig: null,
                rtvGrid: null,
                
                skidFieldList: null,
                
                serialFieldList: null,
            
                Init: function(args) {
                    this.receivingDocument = JSON.parse(args.receivingDocument);
                    KenandyErp.CleanNamespace(this.receivingDocument,'{!namespaceUU}');
                
                    this.receiptLineFieldList = JSON.parse(args.receiptLineFieldList);
                    this.rtvGridConfig = JSON.parse(args.rtvGridConfig);

                    this.skidFieldList = JSON.parse(args.skidFieldList);
                    
                    this.serialFieldList = JSON.parse(args.serialFieldList);
                    
                    RTVUtil.RTVGridInit();
                    
                    $('.save-command').on("click", $.proxy(RTVUtil.Save, { grid: this.rtvGrid, receiptLineFieldList: this.receiptLineFieldList, skidFieldList: this.skidFieldList }));
                },
                
                RTVGridInit: function() {
                    if (this.rtvGrid) {
                        $('#rtvGrid').off();
                        this.rtvGrid.destroy();
                        $('#rtvGrid').empty();
                    }
                
                    this.rtvGrid = $('#rtvGrid').kendoGridActionList({
                        namespace: '{!namespaceUU}', 
                        config: this.rtvGridConfig,
                        fieldList: this.receiptLineFieldList,
                        getActionListFunction: rtvData,
                        modelIdField: 'receiptLine.Id',
                        showIconButtons: false,
                        detailTemplate: kendo.template($("#detailTemplate").html())
                    }).data('kendoGridActionList');
                    
                    this.rtvGrid.hideColumn("IsSelected__custom");
                    
                    this.rtvGrid.wrapper.on("click", ".grid-expand-all-custom-command", $.proxy(RTVGridActions.ExpandRows, { grid: this.rtvGrid }));
                    this.rtvGrid.wrapper.on("click", ".grid-collapse-all-custom-command", $.proxy(RTVGridActions.CollapseRows, { grid: this.rtvGrid }));
                    this.rtvGrid.wrapper.on("click", ".grid-populate-quantities-custom-command", $.proxy(RTVGridActions.Populate, { grid: this.rtvGrid }));
                    
                    this.rtvGrid.bind("detailExpand", $.proxy(RTVGridActions.DetailExpand, { grid: this.rtvGrid }));
                    this.rtvGrid.bind("detailCollapse", $.proxy(RTVGridActions.DetailCollapse, { grid: this.rtvGrid }));

                    this.rtvGrid.bind("detailInit", $.proxy(RTVUtil.SkidGridInit, { grid: this.rtvGrid, skidFieldList: this.skidFieldList, serialFieldList: this.serialFieldList }));
                        
                    this.rtvGrid.refresh();
                },
                
                SkidGridInit: function(e) {
                    var grid = this.grid;
                    var uid = e.data.uid;
                    
                    var skidFieldList = this.skidFieldList;
                    var skidDateFields = KenandyErp.KendoGridOptions.GetDateFields(skidFieldList);
                    var skidReferenceFields = KenandyErp.KendoGridOptions.GetReferenceFields(skidFieldList);
                    
                    var serialFieldList = this.serialFieldList;
                
                    var serialWrappers = [ ];
                    if (skidData.hasOwnProperty(uid)) {
                        serialWrappers = skidData[uid];
                    } else if (e.data.serialWrappers.length > 0) {
                        serialWrappers = JSON.parse(JSON.stringify(e.data.serialWrappers));
                    }
                    
                    var getSkidModel = function() {
                        var fields = KenandyErp.KendoGridOptions.GetFields(skidFieldList);
                        fields.IsSelected__custom = { type: "boolean" };
                        var model = kendo.data.Model.define({ id: "Id", fields: fields });
                        return model;
                    };
                
                    var getSkidDataSource = function() {
                        var dataSource = new kendo.data.DataSource({
                            data: serialWrappers,
                            batch: true,
                            schema: {
                                model: getSkidModel(),
                                parse: function(response) {
                                    $.each(response,function(idx, item) {
                                        item = Serializer.ConvertFromSFDCDate(item, { dateFields: skidDateFields });
                                    });
                                    return response;
                                }
                            },
                            change: function() {
                                skidData[uid] = this.data();
                            } 
                        });
                        return dataSource;
                    };
                    
                    var getSkidColumns = function() {
                        var columns = KenandyErp.KendoGridOptions.GetColumns(skidFieldList);
                        if (serialTracked) {
                            var commands = [ ];
                            commands.push({ name: 'serials-custom-command', text: "", template: "<input type='button' value='Serials' class='btn grid-serials-custom-command'/>" });
                            columns.push({ command: commands, title: "Action", width: 60 });
                        }
                        return columns;
                    };
                    
                    var onDataBound = function(e) {
                        if (e.sender.dataSource.total() == 0) {
                            var colCount = e.sender.columns.length;
                            
                            $(e.sender.wrapper).find('.k-grid-content tbody').append('<tr class="kndy-grid-empty"><td colspan="' + colCount + '" class="kndy-grid-empty-message">No records to display</td></tr>');
                        }
                        
                        try {
                            var data = e.sender.dataSource.view();
                            var parentGrid = grid;
                            
                            if (serialTracked) {
                                var masterRowDataItem = parentGrid.dataItem(e.sender.element.closest('tr.k-detail-row').prev());
                                var enableSerialButton = (masterRowDataItem.line.Item__r && masterRowDataItem.line.Item__r.Item_Attribute__r && masterRowDataItem.line.Item__r.Item_Attribute__r.Serial_Number__c) ? true : false;
                                
                                if (!enableSerialButton) {
                                    setTimeout(function() {
                                        for (var i = 0; i < data.length; i++) {
                                            var rowUid = data[i].uid;
                                            var currenRow = grid.table.find("tr[data-uid='" + rowUid + "']");
                                            $(currenRow).find(".grid-serials-custom-command").toggleClass('btnDisabled',true).prop('disabled',true);
                                        }
                                    }, 0);
                                }
                            }
                        } catch(e) { }
                    };
                
                    var skidGrid = e.detailRow.find(".skidGrid").kendoGrid({
                        dataSource: getSkidDataSource(), 
                        navigatable: true,
                        columns: getSkidColumns(),
                        sortable: false,
                        filterable: true,
                        resizable: true,
                        editable: true,
                        dataBound: onDataBound,
                        edit: function(e) {
                            var input = e.container.find(".k-input");
                            
                            if (e.container.find('.k-numerictextbox').length > 0) {
                                input.addClass("kndy-text-right");
                                input.on('focus',function() {
                                    var that = $(this);
                                    setTimeout(function() {
                                        if (!kendo.support.browser.safari) {
                                            that.select();
                                        }
                                    });
                                });
                                input.focus();
                            }
                        
                            $.proxy(KenandyErp.KendoGridActions.Edit, { referenceFields: skidReferenceFields });
                        }
                    }).data('kendoGrid');
                    
                    skidGrid.wrapper.on("click", ".grid-serials-custom-command", $.proxy(RTVUtil.ManageSerials, { grid: skidGrid, serialFieldList: serialFieldList }));
                },
                
                ManageSerials: function(e) {
                    var grid = this.grid;
                    var row = $(e.target).closest("tr");
                    var dataItem = grid.dataItem(row);
                    var uid = dataItem.uid;
                    var buttons = [KenandyErp.KendoGridOptions.CommandType.Search];
                    
                    
                    var serialAttributes = JSON.parse('{!JSENCODE(serialAttributes)}');
                    var serialFieldList = JSON.parse(JSON.stringify(this.serialFieldList));
                    var serialReferenceFields = KenandyErp.KendoGridOptions.GetReferenceFields(serialFieldList);
                    
                    var i = serialFieldList.length;
                    while (i--) {
                        if ((_.contains(serialAttributes, serialFieldList[i].field.toLowerCase()))
                            && ((!dataItem.skid.Item__r.Item_Attribute__r) 
                            || (dataItem.skid.Item__r.Item_Attribute__r[serialFieldList[i].field] ===false))) {
                            serialFieldList.splice(i,1);
                        }
                    }
                
                    var quantity = dataItem.skid.Quantity_To_Return__c;
                    if (!(quantity > 0)) {
                        KenandyErp.Alert('Please enter a positive quantity to return to enter serial numbers!');
                        return;
                    }
                    
                    var serialList = [ ];
                    if (serialData.hasOwnProperty(uid)) {
                        serialList = serialData[uid];
                    } else if (dataItem.serialList.length > 0) {
                        serialList = dataItem.serialList;
                    }
                    
                    var serialLength = serialList.length;
                    
                    for (var i = 0; i < serialLength; i++) {
                        var serial = serialList[i];
                        
                        if (!serial.SerialName) {    
                            serial.SerialName = { };
                        }
                        
                        if ((serial.SerialName.Name === undefined) && serial.Name) {
                            serial.SerialName.Name = serial.Name;
                        }
                        
                        if ((serial.SerialName.Id === undefined) && serial.Id) {
                            serial.SerialName.Id = serial.Id;
                        }
                    }
                    var conversionFactor = 1;
                    if(dataItem.conversionFactor !=null){
                    	conversionFactor = dataItem.conversionFactor;
                    }
                    quantity = quantity * conversionFactor;
                    if (serialLength < quantity) {
                        for (var i = serialLength; i < quantity; i++) {
                            var serial = { };
                            serial.SerialName = { };
                            serialList.push(serial);
                        }
                    } else if (serialLength > quantity) {
                        for (var i = serialLength; i > quantity; i--) {
                            if (!serialList[i-1].SerialName.Name) {
                                serialList.pop(serialList[i-1]);
                            }
                        }
                    }
                    
                    var checkAll = false;
                    if (serialLength <= quantity) {
                        checkAll = true;
                    }
                    
                    var getSerialModel = function() {
                        var fields = KenandyErp.KendoGridOptions.GetFields(serialFieldList); 
                        fields.IsSelected__custom = { type: "boolean" };
                        var model = kendo.data.Model.define({ id: "Id",fields: fields });
                        return model;
                    };
                    
                    var determineTotal = function(){
                        return serialList.length;
                    }
                    
                    var getSerialDataSource = function() {
                        var dataSource = new kendo.data.DataSource({
                            data: serialList,
                            batch: true,
                            pageSize: 10,
                            serverPaging: false,
                            schema: {
                                model: getSerialModel(),
                                total: determineTotal,
                                parse: function(response) {
                                    $.each(response,function(i, item) {
                                        item = Serializer.ConvertFromSFDCDate(item, { dateFields: KenandyErp.KendoGridOptions.GetDateFields(serialFieldList) });
                                    });
                                    return response;
                                }
                            },
                            change: function() {
                                serialData[uid] = this.data();
                            }           
                        });
                        return dataSource;
                    };
                    
                    if (!serialWindow) {
                        serialWindow = $(".grid-window").kendoWindow({
                            title: "Serials",
                            resizable: false,
                            modal: true,
                            visible: false,
                            content: { }
                        }).data("kendoWindow");
                    }
                
                    if ($(".serialGrid").data('kendoGrid')) {
                        $(".serialGrid").data('kendoGrid').destroy();
                        $(".serialGrid").empty();
                    }
                    
                    var getSerialColumns = function() {
                        var lookupSearchFilters = [ ];
                        lookupSearchFilters.push({ field: "SerialNameId", filter: "SKID__c = \'" + dataItem.skid.Id + "\'" });
                        
                        var columns = KenandyErp.KendoGridOptions.GetColumns(serialFieldList, { lookupSearchAction: '{!$RemoteAction.ReceivingDocumentRTVExtV2.lookupSearchFilter}', lookupSearchFilters: lookupSearchFilters, validateLookupOnBlur: false});
                        columns[0].template = "#= renderRecordNumber() #";
                        columns.unshift({ field: 'IsSelected__custom', filterable: false, sortable: false, template: "<input type='checkbox' data-bind='IsSelected__custom' #= IsSelected__custom ? checked='checked' : '' # class='grid-select-one' />", headerTemplate: "<input type='checkbox' class='grid-select-all' />", width: 30, attributes: { class: 'kndy-text-left' }, headerAttributes: { class: 'kndy-text-left' }});
                        return columns;
                    };
                
                    var getSerialToolbarButtons = function() {
                        return KenandyErp.KendoGridOptions.GetToolbarButtons(buttons);
                    };
                
                    var serialGrid = $(".serialGrid").kendoGrid({
                        dataSource: getSerialDataSource(), 
                        navigatable: true,
                        pageable: { 
                            input: true,
                            numeric: false, 
                            pageSizes: KenandyErp.KendoGridOptions.PageSizes,
                        },
                        columns: getSerialColumns(),
                        toolbar: getSerialToolbarButtons(),
                        sortable: true,
                        filterable: true,
                        resizable: true,
                        editable: true,
                        dataBinding: function() {
                            record = (this.dataSource.page() - 1) * this.dataSource.pageSize();
                            
                            if (checkAll) {
                                var isAnyUncheckedList = $.grep(this.dataSource.data(), function(e) { return e.IsSelected__custom == false; });
                                if (isAnyUncheckedList.length === 0) {
                                    $.each(this.dataSource.data(),function() {
                                        this['IsSelected__custom'] = true;
                                    });
                                    $(".grid-select-all").prop('checked', true);
                                }
                            }
                        },
                        dataBound: function(e) {
                            record = 0;
                        }
                    }).data('kendoGrid');
                    
                    if ( showSerialTopBar ) {
                        $(".serialGrid").prepend('<div class="serialGrid-pager"/>');
                        $('.serialGrid-pager').kendoPager({
                            dataSource: serialGrid.dataSource,
                            pageSizes: [10, 25, 50, 100, 200],
                            input: true,
                            numeric: false
                        });
                    }
                    // bind click events to the custom buttons
                    KenandyErp.KendoGridOptions.BindEvents(serialGrid, buttons, 
                        { 
                            referenceFields: serialReferenceFields
                        }
                    );
                    
                    serialGrid.thead.on("change", ".grid-select-all",$.proxy(KenandyErp.KendoGridActions.SelectAll, { grid: serialGrid }));
                    serialGrid.tbody.on("change", ".grid-select-one",$.proxy(KenandyErp.KendoGridActions.Select, { grid: serialGrid }));
                    serialGrid.bind('edit', $.proxy(RTVUtil.EditSerials, { grid: serialGrid }));
                    
                    if (!($(".grid-select-one").is(":checked"))) {
                        serialGrid.thead.find('.grid-select-all').prop('checked', checkAll);
                        serialGrid.thead.find('.grid-select-all').trigger('change');
                    }
                    
                    serialWindow.open().center();
                },
                
                EditSerials: function(e) {
		   			var self = this;
		   			var grid = self.grid;
		   			var row = e.container.closest('tr');
                    var dataItem = this.grid.dataItem(row);
                    var fieldName = e.container.find("input").length > 0 && e.container.find("input").attr("name") ? e.container.find("input").attr("name").toLowerCase(): '';
                    
                    if(fieldName != "serialnameid" && (!dataItem.IsSelected__custom)){
                        e.sender.closeCell();
                    }
		   			
		   			var serialFieldList = '{!serialFieldListJSON}';
            	    $(e.container).find('input[name="SerialNameId"]').bind('blur',
	            		$.proxy(KenandyErp.RefreshSerialAttributes, { grid: grid, serialFieldList: serialFieldList,namespace: '{!NamespaceUU}', refreshAction:'{!$RemoteAction.ReceivingDocumentRTVExtV2.refreshSerialAttr}' })
            	    );
            	    
            	    
                },
                
                Save: function(e) {
                    var grid = this.grid;
                    var columns = grid.columns;
                    var currentData = grid.dataSource.data();
                    
                    var skidFieldList = this.skidFieldList;
                    var skidDateFields = KenandyErp.KendoGridOptions.GetDateFields(skidFieldList);
                    var receiptLineDateFields = KenandyErp.KendoGridOptions.GetDateFields(this.receiptLineFieldList);

                    var messageElement = $(".page-message");
                    KenandyErp.ClearMessage(messageElement);
                    
                    var rlWrappers = $.map(currentData, function(rlWrapper,idx) {
                        if (skidData.hasOwnProperty(rlWrapper.uid)) {
                            var serialWrappers = $.map(skidData[rlWrapper.uid], function(sw,skIdx) {
                                if (sw.skid.Quantity_To_Return__c > 0) {
                                    var serials = [ ];
                                    if (serialData.hasOwnProperty(sw.uid)) {
                                        serials = serialData[sw.uid];
                                    } else if (sw.skid.Quantity_To_Return__c == sw.serialList.length) {
                                        serials = sw.serialList;
                                    }
                                    
                                    var serialList = $.map(serials, function(serial,serIdx) {
                                        if (!serial['SerialName']) {
                                            serial.SerialName = { Id: serial.Id, Name: serial.Name };
                                        }
                                        
                                        if (serial['SerialName'] && serial.SerialName.Name && !!serial.SerialName.Name.trim() && serial.IsSelected__custom) {
                                            serial.Name = serial.SerialName.Name;
                                            serial.Id = serial.SerialName.Id;
                                            
                                            delete serial['SerialName'];
                                            
                                            if (serial.hasOwnProperty('SerialNameId')) {
                                                delete serial['SerialNameId'];
                                            }
                                            delete serial[""];
                                            
                                            serial = serial.toJSON();
                                            delete serial[""];
                                            return serial;
                                        } else {
                                            return null;
                                        }
                                    });
                                    
                                    sw = sw.toJSON();
                                    sw = Serializer.ConvertToSFDCDate(sw, { dateFields: skidDateFields });
                                    sw.serialList = serialList;
                                    delete sw.skid.Serials__r;
                                    for (var i = 0; i < skidFieldList.length; i++) {
                                        delete sw[skidFieldList[i].field];
                                    }
                                    
                                    return sw;
                                } else {
                                    return null;
                                }
                            });
                            
                            if (serialWrappers.length > 0) {
                                rlWrapper = rlWrapper.toJSON();
                                rlWrapper = Serializer.ConvertToSFDCDate(rlWrapper, { dateFields: receiptLineDateFields });
                                rlWrapper.serialWrappers = serialWrappers;
                                for (var i = 0; i < columns.length; i++) {
                                    delete rlWrapper[columns[i].field];
                                }
                                
                                return rlWrapper;
                            }
                        }
                    });
                    
                    if (rlWrappers.length === 0) {
                        KenandyErp.Message("{!$Label.No_records_changed}",KenandyErp.MessageType.Info,messageElement);
                        return;
                    }
                    
                    if (rlWrappers.length > 0) {
                        updatedRows = Serializer.ParameterMap(rlWrappers, { isDml: false });
                    }
                    
                    KenandyErp.BlockUI(grid.element);
                    $('.go-back').toggleClass('btnDisabled',true).prop('disabled',true);
                    
                    var rlDateFields = receiptLineDateFields ? _.pluck(receiptLineDateFields,KenandyErp.KendoGridOptions.FieldInfo.Field) : null;
                    var skDateFields = skidDateFields ? _.pluck(skidDateFields,KenandyErp.KendoGridOptions.FieldInfo.Field) : null;
                    
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ReceivingDocumentRTVExtV2.save}',
                        rlWrappers,
                        rlDateFields,
                        skDateFields,
                        function(result, event) {
                            $('.save-command').toggleClass('btnDisabled',false).prop('disabled',false);
                            $('.go-back').toggleClass('btnDisabled',false).prop('disabled',false);
                            
                            KenandyErp.UnBlockUI(grid.element);
                            
                            if (event.type == 'exception') {
                                KenandyErp.Message(event.message,KenandyErp.MessageType.Error,messageElement);
                            } else if (result.success) {
                                KenandyErp.NavigateToSObject(RTVUtil.receivingDocument.Id,'detail');
                            } else {
                                KenandyErp.Messages(result.messages,messageElement);
                            }
                        },
                        { escape: false }
                    );
                }
            };
        }();
        
        var RTVGridActions = function() {
            return {
                Populate: function() {
                    var grid = this.grid;
                    var currentData = grid.dataSource.data();
                    grid.expandRow(grid.tbody.find("tr.k-master-row"));
                    var messageElement = $(".page-message");
                    KenandyErp.ClearMessage(messageElement);
                    
                    var skidMap = { };
                    
                    $.each(currentData, function(idx,rlWrapper) {
                        var qtyToDist = 0;
                        if (rlWrapper.line.Quantity_Returned_to_Supplier_for_Credit__c) {
                            qtyToDist += rlWrapper.line.Quantity_Returned_to_Supplier_for_Credit__c;
                        }
                        if (rlWrapper.line.Quantity_returned_to_supplier__c) {
                            qtyToDist += rlWrapper.line.Quantity_returned_to_supplier__c;
                        }
                        if (rlWrapper.line.Quantity_Actually_Returned__c) {
                            qtyToDist -= rlWrapper.line.Quantity_Actually_Returned__c;
                        }
                        
                        var skids = [ ];
                        if (skidData.hasOwnProperty(rlWrapper.uid)) {
                            skids = skidData[rlWrapper.uid];
                        } else if (rlWrapper.serialWrappers.length > 0) {
                            skids = rlWrapper.serialWrappers;
                        }
                        
                        $.each(skids, function(index,sw) {
                            var convFactor = rlWrapper.convFactor;

                            if (sw.skid.Quantity__c > 0) {
                            
                                if (sw.skid.Quantity_Available__c >= qtyToDist) {
                                    sw.skid.Quantity_To_Return__c = qtyToDist * convFactor;
                                } else {
                                    sw.skid.Quantity_To_Return__c = sw.skid.Quantity_Available__c * convFactor;  
                                }
                            
                                skidMap[sw.skid.Id] = sw.skid.Quantity_Available__c;
                            
                                qtyToDist = qtyToDist - sw.skid.Quantity_To_Return__c;
                            
                                if (qtyToDist == 0) {
                                    return;
                                }
                            } else {
                                sw.skid.Quantity_To_Return__c = 0;
                            }
                        });
                    });
                    
                    grid.refresh();
                    RTVGridActions.RestoreExpandedRows(grid);
                },
            
                DetailExpand: function(e) {
                    expandedRows.push(this.grid.dataItem(e.masterRow).uid);
                },
            
                DetailCollapse: function(e) {
                    expandedRows.pop(this.grid.dataItem(e.masterRow).uid);
                },
                    
                ExpandRows: function() {
                    expandedRows = [ ];
                    var grid = this.grid;
                    grid.expandRow(grid.tbody.find("tr.k-master-row"));
                },
            
                CollapseRows: function() {
                    expandedRows = [ ];
                    var grid = this.grid;
                    grid.collapseRow(grid.tbody.find("tr.k-master-row"));
                },
                
                RestoreExpandedRows: function(grid) {
                    for (var i = 0; i < expandedRows.length; i++) {
                        grid.expandRow('tr[data-uid="' + expandedRows[i] + '"]');
                    }
                }
            };
        }();
    </script>
    
    <script type="text/x-kendo-template" id="detailTemplate">
        <div class="grid-container grid-detail-container k-block k-info-colored">
            <div class="grid-message" />
            <div class="skidGrid" />
        </div>
    </script>
</apex:page>