<apex:page standardController="Company__c" extensions="SetupSampleData,ProcessScheduleExt"  >

<apex:sectionHeader title="{!$Label.Configuration_and_Setup}" subtitle="{!Company__c.Name}" />
<div class="bPageTitle bCrumb" >
<div class="ptBreadcrumb">&nbsp;&laquo;&nbsp;<a href="/{!company__c.id}">{!$Label.Go_Back}</a></div>
</div>

<c:busyWait />
<c:KendoResources />
<apex:includeScript value="{!$Resource.GridRelatedListJS}" />
<apex:form id="theForm" ><c:busyWait />
	    <apex:pageMessages escape="false" />
	      <div id="MessagesBlock">  
	                   <apex:pagemessages id="Messages" />
	                    <div class="page-message"></div>
	    </div>
<apex:pageBlock mode="maindetail" >

	<apex:pageMessages /> 

	<apex:pageBlockSection title="{!$Label.Default_Scheduled_Jobs}"  collapsible="false" >
		<apex:commandButton value="{!$Label.Create_Default_Scheduled_Jobs_for} {!Company__c.Name}"  
			action="{!DefaultJobsBuild}" 
			status="actionStatus"
			rerender="theForm"  />
		<p>{!$Label.Create_scheduled_processes}	</p>
	
	</apex:pageBlockSection>

	<apex:pageBlockSection title="{!$Label.Sample_Data}"  collapsible="false" >
		<apex:commandButton value="{!$Label.Create_Sample_Data_for} {!Company__c.Name}"  
			action="{!TestDataBuild}"  
			status="actionStatus"
			rerender="theForm" />
		<p> {!$Label.Create_global_data}  
		</p>
		<p>{!$Label.Create_data}</p>
		<apex:commandButton value="{!$Label.Create_Financial_Data_For} {!Company__c.Name}"  
		    action="{!prepareDataLoad}" 
		    rerender="jsPanel" 
		    oncomplete="showProgressBar();" 
			status="actionStatus" />
		<p> {!$Label.Create_Finance_Data}</p>
		
	</apex:pageBlockSection>
		
</apex:pageBlock>


</apex:form>
<style>
.bPageTitle {
    margin-bottom: 0px;
}
body .bCrumb { margin-bottom: 15px; }  

</style>
    <script>
       Visualforce.remoting.timeout = 120000; // Set timeout at page level
       
       var namespace = '{!namespace}';
   	   var Chunks = '';
       var chunkSize='';
	   var RemoteDeferredReverse = [];
	   var deferredReverse = $.Deferred();
	   var Progress = 0;
	   var numberOfRetries=1;
	       var realtimeRetriesClone=new Array();

	      /*Do a retry for the failed chunk in case of transaction timeouts*/
	   	function checkRetry(event) {
	        var doRetry = false;
	        if (event.type === 'exception') {
	        	if ((event.message.indexOf("timeout") > -1) ||
	        		(event.message.indexOf("Remoting request invalid for your session") > -1) || 
	        		(event.message.indexOf("Logged in") > -1)) {
	        		doRetry = true;	
	        	}	
	        }  
	        return doRetry;  	
		}      
    

    	function showProgressBar() {
            var largemsg='The Sample Data is being created.Please do not refresh page or press Back button of browser';                                                     
   			KenandyErp.BlockUI();
            KenandyErp.Message(largemsg, KenandyErp.MessageType.Info);                                              
            InsertSampleData(0);
    	}
    	
        function InsertSampleData(chunkIndex)
        { 
             
                var RemoteDeferredItemReverse= $.Deferred();
                var currchunkIndex = chunkIndex;
                var chunkItem=Chunks[currchunkIndex];
                RemoteDeferredReverse.push(RemoteDeferredItemReverse);  
                console.log('chunks here');
                console.log(Chunks);
                console.log('currchunkIndex');
                console.log(currchunkIndex);
            
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.SetupSampleData.InsertSampleData}',
                            currchunkIndex,
                            Chunks[currchunkIndex],
                            chunkSize,
                            companyid,
                            function (result, event) {
                                
                                console.log('Remote result ');
                                console.log(result);                             
                               
                                EventObj=Object.create(event);
                                if(event.status==true)
                                {
                                    if(!result.AllDone)
                                    {
                                        Progress=result.Progress;
                                        if(Progress!=-1)
                                        {
	                                        InsertSampleData(result.NextChunkIndex);
                                        }
                                        else
                                            {
									            var largemsg='Error occurred while creating sample Data. The sample data is not created.' + result.Messages;                                                     
									            KenandyErp.Message(largemsg, KenandyErp.MessageType.Info);                                              
  												KenandyErp.UnBlockUI();
                                            }
                                         RemoteDeferredItemReverse.resolve(result, event);                                    
                                    }
                                    else if(result.AllDone)
                                    {
							            var largemsg='The sample data is created.' + result.Messages;                                                     
							            KenandyErp.Message(largemsg, KenandyErp.MessageType.Info);                                              
   										KenandyErp.UnBlockUI();
                                    }                           
                                }
                                else  //Remoting failure
                                    {
                                                                        
                                        var isTimeout=checkRetry(event);
						                if(isTimeout)
						                {
											if (currchunkIndex in realtimeRetriesClone) 
											{
												realtimeRetriesClone[currchunkIndex]++;
											} 
											else 
											{
												realtimeRetriesClone[currchunkIndex] = 1;
											}
											
											if (realtimeRetriesClone[currchunkIndex] <= numberOfRetries) {
											
                                                RemoteDeferredItemReverse.resolve(result, event);						
												InsertSampleData(currchunkIndex);
												
											} 
											else {
												//we hit our number of retries, time to fail
                                                KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
											}
						                
						                }
						                else
						                {
						                	//some error
						                }

                                }
    
                            },
                            {escape: false});
                return RemoteDeferredItemReverse.promise();
			                                 			
        } 
        
    </script>
    <apex:outputPanel id="jsPanel">
    
    <script>
   		Chunks = JSONUtils.Parse('{!ChunkStr}');
   		chunkSize   = "{!chunkSize}";
   		companyid = "{!CompanyId}";
		numberOfRetries='{!NumberOfRetries}';
   		console.log('inside JSPanel');
        console.log('chunks');
        console.log('Chunks');
        console.log(Chunks);
    </script>
	</apex:outputPanel> 
</apex:page>