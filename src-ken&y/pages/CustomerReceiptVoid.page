<apex:page standardController="Customer_Receipt__c" extensions="CustomerReceiptVoidCancelExt" action="{!voidDetails}"  title="Void {!Customer_Receipt__c.Name}" >
	<apex:form id="form">
        <c:busyWait includeScripts="false"/>
	    <c:KendoResources />
	    <apex:includeScript value="{!$Resource.GridRelatedListJS}" />
	    <div id="MessagesBlock">  
		    <apex:pagemessages id="Messages" />
		    <div class="page-message"></div>
	    </div>
        <apex:pageBlock >
        	<apex:pageBlockButtons location="top">
                <apex:commandButton id="voidBtn" value="Void" disabled="{!disableVoid || AlreadyVoided}" action="{!prepreVoid}" rerender="jsPanel" oncomplete="showProgressBar();" onclick="KenandyErp.BlockUI();" />
                <apex:commandButton value="Return" reRender="form" status="actionStatus" onClick="goback();return false;"/>
            
            </apex:pageBlockButtons>
            <apex:pageBlockSection >
            	<apex:repeat value="{!$ObjectType.Customer_Receipt__c.FieldSets.Void}" var="v">
                 <apex:outputField value="{!Customer_Receipt__c[v]}" rendered="{!v.fieldpath != namespace+'Void_Date__c'}"/>
                </apex:repeat> 
                <apex:inputField value="{!Customer_Receipt__c.Void_Date__c}" id="voidDateEdit" required="true" rendered="{!Not(disableVoid || AlreadyVoided)}"/>
                <apex:outputField value="{!Customer_Receipt__c.Void_Date__c}" rendered="{!disableVoid || AlreadyVoided}" id="voidDateOutput"/>
            </apex:pageBlockSection>
        
            <apex:pageBlockSection title="Transaction Details" rendered="{!Customer_Receipt__c.Payment_Method_3__c != null}">
           		 <apex:outputField value="{!Customer_Receipt__c.Payment_Method_3__c}"/>
                <apex:outputField value="{!Customer_Receipt__c.Transaction_ID__c}"/>
            </apex:pageBlockSection>
        
	        <table class="kndy-table">
	        	<tr>
	        		<td align="center">
	        			<div id="ProgressBar" ></div>
	        		</td>
	        	</tr>
	        </table>
        </apex:pageBlock>        
    
    </apex:form>
    <script>
       Visualforce.remoting.timeout = 120000; // Set timeout at page level

       function goback(){
		if(typeof sforce !== "undefined" && typeof sforce.one !== "undefined") {
			sforce.one.back(true);
		} else {
			window.location.href = '/{!Customer_Receipt__c.Id}';
		}
	  }

       var namespace = '{!namespace}';
       var headerDateFields = [
       		{ field: "Transaction_Date__c", fieldtype: "datetime"},
       		{ field: "Finalized_Date__c", fieldtype: "datetime"},
       		{ field: "Posting_Date__c", fieldtype: "datetime"},
       		{ field: "Void_Date__c", fieldtype: "datetime"}
       	];
   	   var revChunks = '';//serialized map of the AutoNumReverseChunks
       var voidAEId='';
       var doVoid = true;
       var revSize='';
    	var RemoteDeferredReverse = [];
    	var pb;
    	var AELineCount;
    	var deferredReverse = $.Deferred();
    	var Progress = 0;
    	var voidCR = [];
    	var guid= '';
    	var AlreadyVoided = false;
    	var numberOfRetries=1;
        var realtimeRetriesReversal=new Array();
        var voidDateTime;
        var tranDateTime;  
        
        function unblockUi(){
            KenandyErp.UnBlockUI();
            $("[id$='voidBtn']").toggleClass('btnDisabled', true).attr('disabled', 'disabled');        
            $("[id$='voidDateEdit']").toggleClass('btnDisabled', true).attr('disabled', 'disabled');        
        }

	      /*Do a retry for the failed chunk in case of transaction timeouts*/
	   	function checkRetry(event) {
	        var doRetry = false;
	        if (event.type === 'exception') {
	        	if ((event.message.indexOf("timeout") > -1) ||
	        		(event.message.indexOf("Remoting request invalid for your session") > -1) || 
	        		(event.message.indexOf("Logged in") > -1)) {
	        		doRetry = true;	
	        	}	
	        }  
	        return doRetry;  	
		}      
    
    	function voidTransaction() {

    		var deferred = $.Deferred();
    		Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.CustomerReceiptVoidCancelExt.voidTransaction}',
                '{!Customer_Receipt__c.Id}', 
                '{!Customer_Receipt__c.Transaction_ID__c}',
                function (result, event) {
                    deferred.resolve(result, event);
                    
            });
            return deferred.promise();
    	}

    	function showProgressBar() {
            var vd = KenandyErp.IsValidDateTime($('input[id$="voidDateEdit"]').val());
            KenandyErp.BlockUI();
		    if(AlreadyVoided == "true"){
            	KenandyErp.Message('Document Already Voided.', KenandyErp.MessageType.Info);
            	unblockUi();
                $('span[id$="Messages"]').css('display','none');
            }else if(vd == false){
                KenandyErp.Message('The Void date format is invalid.', KenandyErp.MessageType.Error);
            	KenandyErp.UnBlockUI();
                $('span[id$="Messages"]').css('display','none');
            }else{
                   if(revSize == 0){ 
	                    //void in one go!! so first call voidTransaction!
                    var retrunResult = voidTransaction();
                    retrunResult.done(function(result, event){
                        	
                     	if(event.type === 'exception'){
	                     	console.log("Received an exception");
	                     	console.log(event);
                     	}else{
							if(result.success){
								KenandyErp.Messages(result.messages);
                    Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CustomerReceiptVoidCancelExt.VoidWithoutAEL}',
                     voidAEId,
                     guid,
                     function (result, event) {
                         if (result.AllDone==true){
			                            
                            var headerRowsList = [];
                            var headerRows = [];
                             
                            headerRowsList.push(voidCR);
                             
                            headerRows = $.map(headerRowsList, function(item, index) {
                                delete item['attributes'];                      
                                item = Serializer.ConvertToSFDCDate(item, { dateFields: headerDateFields });
                                 
                                return item;
                            });
                             
                            if (headerRows.length > 0) {
                                headerRows = Serializer.ParameterMap(headerRows);
                            }
                             
                            Visualforce.remoting.Manager.invokeAction(
                                 '{!$RemoteAction.CustomerReceiptVoidCancelExt.ActualVoidSD}',
                                 headerRows, 
                                 guid,
                                 function (result, event) {
                                     if (result.AllDone==true){
                                         KenandyErp.Message('{!$Label.Customer_Receipt_Was_Voided}', KenandyErp.MessageType.Info);
			                                         $('span[id$="Messages"]').css('display','none');
			                                         unblockUi();
			                                     }else{
                                         KenandyErp.Message(result.Messages, KenandyErp.MessageType.Info);
                                     }
                                     KenandyErp.UnBlockUI();
                             });
			                        }else{
                            KenandyErp.Message(result.Messages, KenandyErp.MessageType.Info);
			                            unblockUi();
                        }
                     });
							}
							else{
								KenandyErp.Messages(result.messages);
								KenandyErp.UnBlockUI();
								return;
							}                        	
                     	}
                   });
                                                     
                }else{
                	var retrunResult = voidTransaction();
                	retrunResult.done(function(result, event){
                        	
                     	if(event.type === 'exception'){
	                     	console.log("Received an exception");
	                     	console.log(event);
                     	}else{
							if(result.success){
								KenandyErp.Messages(result.messages);
                    $('#tab').hide();
                    var largemsg='The Source Document is being Voided.Please do not refresh page or press Back button of browser';                                                     
                    KenandyErp.Message(largemsg, KenandyErp.MessageType.Info);                                              
                    progressbar(0, AELineCount);
                    reverseAE(0);
			                }else{
								KenandyErp.Messages(result.messages);
								KenandyErp.UnBlockUI();
								return;
        	}
    	}
                   });
    	
                }
        	}
    	}
    	
        function reverseAE(chunkIndex)
        { 
             
                $('#ProgressBar').show();
                var RemoteDeferredItemReverse= $.Deferred();
                var currchunkIndex = chunkIndex;
                var chunkItem=revChunks[currchunkIndex];
                var max=chunkItem['max']; 
                var min=chunkItem['min']; 
                voidDateTime = new Date($('input[id$="voidDateEdit"]').val());
                tranDateTime = new Date("{!Customer_Receipt__c.Transaction_Date__c}");
                
                RemoteDeferredReverse.push(RemoteDeferredItemReverse);  
                console.log('chunks here');
                console.log(revChunks);
                console.log('currchunkIndex');
                console.log(currchunkIndex);  
            
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerReceiptVoidCancelExt.reverseAEWithDates}',
                            voidAEId, 
                            currchunkIndex,
                            revSize,
                            min,
                            max,
                            doVoid,
                            guid,
                            voidDateTime,
                            tranDateTime,
                            function (result, event) {
                                EventObj=Object.create(event);
                                if(event.status==true)
                                {
                                    if(!result.AllDone)
                                    {
                                        Progress=result.Progress;
                                        if(Progress!=-1)
                                            {
                                               if(result.ChunkReverse==true)
                                                    {                                                                                            
                                                        reverseAE(result.NextChunkIndex);
                                                    }
                                                else
                                                    {
                                                        KenandyErp.Message(result.Messages, KenandyErp.MessageType.Error);
                                                        KenandyErp.UnBlockUI();
                                                        $('span[id$="Messages"]').css('display','none');  
                                                        $('#tab').show();
                                                        $('#ProgressBar').hide();
                                                        //some error deleting current current chunk .Displayed in messages.  
                                                    }  
                                            }
                                        else
                                            {
                                                //Some Error 
                                            }
                                         RemoteDeferredItemReverse.resolve(result, event);                                    
                                    }
                                    else if(result.AllDone)
                                    {
                                        Progress=AELineCount-1;
                                        console.log('Reverse Complete');                                         
                                        RemoteDeferredItemReverse.resolve(result, event);      
                                        $.when.apply($, RemoteDeferredReverse).done( function (obj1,obj2)
                 						
                                        {                                                      
                                            deferredReverse.resolve(obj1,obj2);                                              
                                            if(result.ChunkReverse==true)
                                            {
                                               
                                               var headerRowsList = [];
                                               var headerRows = [];
                                                
                                               headerRowsList.push(voidCR);
                                                
                                                headerRows = $.map(headerRowsList, function(item, index) {
                                                    delete item['attributes'];                      
                                                    item = Serializer.ConvertToSFDCDate(item, { dateFields: headerDateFields });
                                                    
                                                    return item;
                                                });
                                                
                                                if (headerRows.length > 0) {
                                                    headerRows = Serializer.ParameterMap(headerRows);
                                                }
                                               
                                                Visualforce.remoting.Manager.invokeAction(
                                                   '{!$RemoteAction.CustomerReceiptVoidCancelExt.ActualVoidSDWithDates}',
                                                    headerRows,
                                                    guid, 
                                                    voidDateTime,
                                                    function (result, event) {
                                                       if(event.status==true){
                                                        
	                                                        if (result.AllDone==true){
	                                                            $('#tab').show();
	                                                            $('#ProgressBar').hide();  
	                                                            $('#voidDateEdit').hide();
	                                                            KenandyErp.Message('{!$Label.Customer_Receipt_Was_Voided}', KenandyErp.MessageType.Info);
	                                                            unblockUi();
                                                                $('span[id$="Messages"]').css('display','none');
	                                                        }
	                                                        else{
	                                                            KenandyErp.Message(result.Messages, KenandyErp.MessageType.Info);
	                                                            $('#tab').show();
	                                                            $('#ProgressBar').hide();  
	                                                            KenandyErp.UnBlockUI();  
	                                                        }
                                                        }
										                else
										                {
					                                        var isTimeout=checkRetry(event);
											                if(isTimeout)
											                {	
											                	for(var i=1; i<=numberOfRetries;i++){
											                	var ckeckBreak = false;
					                                                Visualforce.remoting.Manager.invokeAction(
					                                                   '{!$RemoteAction.CustomerReceiptVoidCancelExt.getstopRetry}',
					                                                    voidAEId, 
					                                                    function (result, event) {
					                                                    	if(event.status==true){
					                                                    		if(result == true){
																					KenandyErp.Message('{!$Label.Customer_Receipt_Was_Voided}', KenandyErp.MessageType.Info);
						                                                            $('#tab').show();
						                                                            $('#ProgressBar').hide();  
														                			ckeckBreak = true;
														                			KenandyErp.UnBlockUI();
											                					}
											                				}
											                			}
											                		);
					                                                
					                                                if(ckeckBreak == true){
			                                                            $('#tab').show();
			                                                            $('#ProgressBar').hide();  
			                                                            KenandyErp.Message('{!$Label.Customer_Receipt_Was_Voided}', KenandyErp.MessageType.Info);
			                                                            unblockUi();
														            	break;
					                                                }   													                		
					                                                Visualforce.remoting.Manager.invokeAction(
					                                                   '{!$RemoteAction.CustomerReceiptVoidCancelExt.ActualVoidSD}',
					                                                    headerRows,
					                                                    guid, 
					                                                    function (result, event) {
					                                                        if(event.status==true){
					                                                        
						                                                        if (result.AllDone==true){
						                                                            $('#tab').show();
						                                                            $('#ProgressBar').hide();  
						                                                            KenandyErp.Message('{!$Label.Customer_Receipt_Was_Voided}', KenandyErp.MessageType.Info);
						                                                            unblockUi();
                                                                                    $('span[id$="Messages"]').css('display','none');
						                                                        }
						                                                        else{
						                                                            KenandyErp.Message(result.Messages, KenandyErp.MessageType.Info);
						                                                            $('#tab').show();
						                                                            $('#ProgressBar').hide();  
						                                                            KenandyErp.UnBlockUI();  
						                                                        }
						                                                    }
																				}
					                                                );											                													                												                												                	
											                	}
											                }	
											            }
                                                        
                                                    }
                                                );
                                                 
                                              } else {
                                                     KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
                                                     unblockUi();
    
                                              }
                                        });                                                                     
                                    }                           
                                }
                                else  //Remoting failure
                                    {
                                                                        
                                        var isTimeout=checkRetry(event);
						                if(isTimeout)
						                {
											if (currchunkIndex in realtimeRetriesReversal) 
											{
												realtimeRetriesReversal[currchunkIndex]++;
											} 
											else 
											{
												realtimeRetriesReversal[currchunkIndex] = 1;
											}
											
											if (realtimeRetriesReversal[currchunkIndex] <= numberOfRetries) {
											
												console.log('Inside Void -'+' Current Retry Count:'+realtimeRetriesReversal[currchunkIndex]+', currchunkIndex: '+currchunkIndex+', max:'+ max+', min :'+ min +', curr time: ' + new Date());
                                                RemoteDeferredItemReverse.resolve(result, event);						
												reverseAE(currchunkIndex);
												
											} 
											else {
												//we hit our number of retries, time to fail
                                                KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
                                                $('#tab').show();
                                                $('#ProgressBar').hide();  
                                                unblockUi();
											}
						                
						                }
						                else
						                {
		                                      KenandyErp.Message(event.message, KenandyErp.MessageType.Fatal);
                                              $('#tab').show();
                                              $('#ProgressBar').hide();  
                                              KenandyErp.UnBlockUI();  
						                }

                                }
    
                            },
                            {escape: false});
                progressbar(Progress,AELineCount);
                return RemoteDeferredItemReverse.promise();
			                                 			
        } 
        
        function progressbar(progressCount,LineCount)
            {
                var exp=LineCount;
                var curr=progressCount;

                if (pb) {
                    pb.value(curr);
                }
                else {
                    pb = $("#ProgressBar").kendoProgressBar({
                        type: "percent",
                        min: 0,
                        max: exp,
                        value: curr,
                        animation: {
                            duration: 200
                        }
                    }).data("kendoProgressBar");
                }
            }
    </script>
    <apex:outputPanel id="jsPanel">    
    <script>
   		revChunks = JSONUtils.Parse('{!reverseChunkMap}');
   		voidAEId  = "{!voidAEId}";
   		revSize   = "{!reverseSize}";
   		AELineCount = "{!AELineCount}";
   		voidCR = JSONUtils.Parse('{!voidCRSer}');
   		guid = "{!guid}";
		numberOfRetries='{!NumberOfRetries}';
   		if (voidCR.length > 0) {
   			voidCR = voidCR[0];
   			KenandyErp.CleanNamespace(voidCR, namespace);
   			Serializer.ConvertFromSFDCDate(voidCR, { dateFields: headerDateFields });
   		}
		AlreadyVoided = "{!AlreadyVoided}";
    </script>
        </apex:outputPanel>
</apex:page>