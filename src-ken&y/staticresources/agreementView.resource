(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* global $ */
var loadGrid = require( "./src/views/AgreementGrid" );
var loadDetailGrid = require( "./src/views/AgreementLineGrid" );
var drawTreeList = require( "./src/views/AgreementLineTreeList" );
var utility = require( "./src/utils/AgreementViewHelper" );

$( document ).on( "AgreementViewReady", function( e ) {
     //setting width of grids as per the parent container outerWidth
     var sidebarWidth = $( "#sidebarCell" ).outerWidth() ? $( "#sidebarCell" ).outerWidth() : 0;
     var tabBarWidth = $( "#tabBar" ).outerWidth();
     var windowWidth = $( window ).outerWidth();
     var margins = ( ( windowWidth - tabBarWidth ) / 2 );
     
     if ( tabBarWidth ) {
         $( ".bodyDiv" ).outerWidth( tabBarWidth - sidebarWidth - margins  );
         $( "#mainpage" ).outerWidth( tabBarWidth - sidebarWidth - margins );
     }

	 loadGrid();
	 utility.loadpanelBar();

        var grid = $( "#promotions" ).data( "kendoGridActionList" );
     $('#promotions').width($('.grid-container').width());

} );

$( document ).on( "redrawTreeList", function( e ) {
	var grid = $( "#promotions" ).data( "kendoGridActionList" );
	var treeList = $( "#pprod" ).data( "kendoTreeList" );
	
	treeList.destroy();
	$( "#pprod" ).empty();
	drawTreeList( grid.dataSource._data[0] );
} );

},{"./src/utils/AgreementViewHelper":7,"./src/views/AgreementGrid":10,"./src/views/AgreementLineGrid":11,"./src/views/AgreementLineTreeList":12}],2:[function(require,module,exports){
/* global $ */
module.exports = function( ele, grid, page ) {
    
    var messageElement = grid.element
        .closest( "div.grid-container" )
        .find( "div.grid-message:first" );
        
	var actionDropdownVal = $( "#" + ele + "ActionDropdown" ).val(),
        actionConfig = ele + "ActionConfig";

    var selectedActionConfig = page[actionConfig][actionDropdownVal];

    var messageCreateSalesOrder = 'This action can not be performed on Draft agreement status';
    var pgrid = $('#promotions').data('kendoGridActionList');
    var statusvalue = pgrid.dataItem(pgrid.select()) ? pgrid.dataItem(pgrid.select()).Status__c : null;

	if ( typeof selectedActionConfig != "undefined" ) {
		var divId = selectedActionConfig.div;
        var awindow = $( "#" + divId );

		awindow.empty();
		awindow.append( "<div id='" + divId + "window'></div>" );

        var actionWindow = $( "#" + divId + "window" );
        var onActionWindowClose = function() {
            $( this.element ).empty();
            if ( grid ) {
                grid.dataSource._destroyed = [];
                grid.dataSource.read();
            }
        };
        if( selectedActionConfig.content.indexOf( "id=" ) == -1 ) {
            if( ele == "promo" ) {
                KenandyErp.Message( "Please Select an Agreement", messageElement );
            }
            if( ele == "promoProd" ) {
                KenandyErp.Message( "Please Select an Agreement Line", messageElement );
            }
        }

        //KNDY-16165 - Skip 'promoProdActionConfig' - Actions from line grid and this validation applies only on agreement header grid
        else if(statusvalue.toLowerCase() != 'approved' && statusvalue != null && actionDropdownVal.toLowerCase() != 'cloneagreement' && actionConfig != 'promoProdActionConfig'){
             KenandyErp.Message( messageCreateSalesOrder, messageElement );
        }
        
        else {
            actionWindow.kendoWindow( {
                width: selectedActionConfig.width, height: selectedActionConfig.height,
                iframe: true, modal: true,
                title: selectedActionConfig.title,
                content: selectedActionConfig.content,
                close: onActionWindowClose,
                deactivate: function() {
                        this.destroy();
                }
            } );
            actionWindow.data( "kendoWindow" ).center().open();  
        }
        
    }
};

},{}],3:[function(require,module,exports){
/* global _ */
/* global $ */
/* global Visualforce */
/* global KenandyErp */
/* global Serializer */

module.exports = function( e ) {
    
    var self = this;
    var grid = self.grid;
    var options = self.options;

    var messageElement = grid.element
        .closest( "div.grid-container" )
        .find( "div.grid-message:first" );

    if ( grid.editable && !grid.editable.validatable.validate() ) {
        e.preventDefault();
        return false;
    }

    var currentData = grid.dataSource.data();
    var updatedRows = [];
    var newRows = [];
          
    $.each( currentData, function( index, item ) {

        if ( item.id === "" || item.dirty ) {
            var isNewRow = ( item.id === "" );
            item = item.toJSON();
            item = Serializer.ConvertToSFDCDate( item, { dateFields: options.dateFields } );
            if ( isNewRow ) {
                delete item.Id;     
                newRows.push( item );
            } else {
                updatedRows.push( item );
            }
        }
    } );

    var deletedRows = $.map( grid.dataSource._destroyed, function( item, index ) {
        item = item.toJSON();
        item = Serializer.ConvertToSFDCDate( item, { dateFields: options.dateFields } );
        return item;
    } );

    if ( newRows.length === 0 && updatedRows.length === 0 && deletedRows.length === 0 ) {
        KenandyErp.Message( "No Records Changed", KenandyErp.MessageType.Info, messageElement );
        return;
    }

    if ( updatedRows.length > 0 ) {
        updatedRows = Serializer.ParameterMap( updatedRows );
    }

    if ( newRows.length > 0 ) {
        newRows = Serializer.ParameterMap( newRows );
    }

    if ( deletedRows.length > 0 ) {
        deletedRows = Serializer.ParameterMap( deletedRows );
    }

    var changeListIds = _.union( _.pluck( updatedRows, "Id" ), _.pluck( deletedRows, "Id" ) );

    KenandyErp.BlockUI( grid.element );

    var dateFields = self.options.dateFields ? 
        _.pluck( self.options.dateFields, KenandyErp.KendoGridOptions.FieldInfo.Field ) : 
        null;
     
    Visualforce.remoting.Manager.invokeAction(
        options.saveAction,   
        updatedRows,
        newRows,
        deletedRows,
        dateFields,
        function( result, event ) {
            KenandyErp.UnBlockUI( grid.element );    
            if ( event.type == 'exception' ) {
                KenandyErp.Message( event.message, KenandyErp.MessageType.Error, messageElement );
            } else {
                if ( result.success ) {
                    var newIds = _.difference( _.pluck( result.records, "Id" ), changeListIds );

                    // refresh the grid
                    grid.dataSource._destroyed = [];
                    grid.dataSource.read( { newIds: newIds } );
                    $( document ).trigger( "redrawTreeList" );
                    KenandyErp.Messages( result.messages, messageElement );
                } else {
                    KenandyErp.Messages( result.messages, messageElement );
                }
            }
        },
        { escape: false }
    );
};

},{}],4:[function(require,module,exports){
/* global $ */
/* global _ */
/* global AgreementViewComponent */
/* global Visualforce */
/* global KenandyErp */
/* global Serializer */
var utility = require( "../utils/AgreementViewHelper" );

module.exports = function( options, dateFields, context ) {

	var treeList = $( "#pprod" ).data( "kendoTreeList" );

    var columns = treeList.columns;

    var messageElement = treeList.element
        .closest( "div.grid-container" )
        .find( "div.grid-message:first" );

    var item = options.data.models[0];
    delete item.hasChildren;
    delete item.expanded;

    if ( context == "create" ) {
        delete item.agl.Id;
    }

    if ( context == "delete") {
        if (item.agl.Id == null || item.agl.Id.length == 0){
            return;
        }
    }
    item = Serializer.ConvertToSFDCDate( item, { dateFields: dateFields } );
    
    //Remove the extra attributes Kendo Grid creates for supporting wrapper classes
    for (var i = 0; i < columns.length; i++) {
        var name = columns[i].field;
		if (name && name.indexOf('.') != -1) {
		    delete item.agl[name];
		}
    }
    
    item.agl = utility.convert(item.agl);
    item.segments = utility.convert(item.segments);
    
    var hasNoSegments = $.isEmptyObject(item.segments)
    KenandyErp.BlockUI( treeList.element );

    dateFields = dateFields ?
         _.pluck( dateFields, KenandyErp.KendoGridOptions.FieldInfo.Field ) : 
         null;
         
    AgreementViewComponent.expandedRows = $.map($('[aria-expanded="true"]'), 
        function (row) {
            return $(row).data("uid");
    });
    
    item = _.pick(item, 'agl', 'segments');
    
    Visualforce.remoting.Manager.invokeAction(
        AgreementViewComponent.saveAgreementLinesAction,
        item,
        dateFields,
        context,
        function( result, event ) {
            KenandyErp.UnBlockUI( treeList.element );  
            if ( event.type == "exception" ) {
                KenandyErp.Message( event.message, KenandyErp.MessageType.Error, messageElement );
            } else {
                if ( result.success ) {
                    
                    treeList.one("dataBound", function () {
                    var rows = treeList.tbody.children().filter(function (idx, row) {
                            return $.inArray($(row).data("uid"), AgreementViewComponent.expandedRows) >= 0;
                        });
                    
                    for(var i = 0; i < rows.length; i++) {
                        treeList.expand(rows[i]);
                    }
                    });
                    treeList.dataSource._destroyed = [];
                    treeList.dataSource.read();
                    KenandyErp.Messages( result.messages, messageElement );
                } else {
                    KenandyErp.Messages( result.messages, messageElement  );
                }
            }
        },
        { escape: false }
    );
};

},{"../utils/AgreementViewHelper":7}],5:[function(require,module,exports){
/* global $ */
/* global AgreementViewComponent */
var dropDownAction = require( "../actions/DropdownActions" );
var AgreementLineSave = require( "../actions/GridSaveAction" );

module.exports = function( grid, isRefresh ) {
    $( grid.element ).find( ".grid-add-line-command" ).bind( "click", function( e ) {
        grid.addRow();
    } );

    // unbind grid save command
    grid.wrapper.off( "click", ".grid-save-line-command" );   

    // bind grid save command
    grid.wrapper.on( "click", ".grid-save-line-command", $.proxy( AgreementLineSave, {
        grid: grid,
        options: {
            saveAction: AgreementViewComponent.saveAgreementLinesAction,
            config: AgreementViewComponent.agreementLinesGridConfig,
            dateFields: AgreementViewComponent.agreementLineDateFields
        }
    } ) );

    $( grid.element ).find( ".grid-cancel-line-command" ).bind( "click", function( e ) {
        grid.cancelChanges();       // do the cancel work
        e.preventDefault();
    } );
       
    $( "#promoProdActionDropdown" ).kendoDropDownList( {
         optionLabel: "",
         dataTextField: "text",
         dataValueField: "value",
         dataSource: AgreementViewComponent.promodProdActionDatasource
     } );
    
    $( ".grid-view-options" ).kendoDropDownList( {
         dataTextField: "text",
         dataValueField: "value",
         dataSource: AgreementViewComponent.pprodGridViews,
         dataBound: function(e){
            //Show default grid view
            fieldNames = _.values(_.pick(AgreementViewComponent.pprodGridViewFields, this.dataSource._data[0].value))[0];

            DisplayViewFields(fieldNames);
           
        },
        change: function(e) {  

            var fieldNames = AgreementViewComponent.agreementLineFieldNames;

            for (var fld in fieldNames) {
                grid.hideColumn(fieldNames[fld]);
            }

            fieldNames = _.values(_.pick(AgreementViewComponent.pprodGridViewFields, this.value()))[0];

            DisplayViewFields(fieldNames);
         
        }
     } );
    
    function DisplayViewFields(fieldNames) {
        var segmentPrefix = 'agl.Accounting_Segment__r.';
        var i = -1;//Starting index of View columns(After checkbox, errors and id)
        for (fld = 0; fld < fieldNames.length; fld++) { 
            i = i + 1;
            //Get column index for field name
            var colIndex = GetColumnIndexFromName(grid, fieldNames[fld]);
            
            if(fieldNames[fld].length >= segmentPrefix.length && fieldNames[fld].indexOf(segmentPrefix) > -1){

                //Change the AGL fields to segments fields
                var segmentFieldName = 'segments.' + fieldNames[fld].substring(fieldNames[fld].indexOf(segmentPrefix) + segmentPrefix.length);

                //Get the column index for segment fields
                colIndex = GetColumnIndexFromName(grid, segmentFieldName);
            } 

            //Show columns
            if(fieldNames[fld] != 'agl.Id'){
                //Re-order columns based on the field set order
                grid.reorderColumn(i, grid.columns[colIndex]);
                grid.showColumn(i);
            }
        }
      
    }

    function GetColumnIndexFromName(grid, fieldName) {
        var index = -1;
        var columns = grid.columns;
        if (columns.length > 0) {
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].field == fieldName) { // columns[i].title -- You can also use title property here but for this you have to assign title for all columns
                    index = i;
                }
            }
        }
        return index;
    }


    $( grid.element ).find( ".k-grid-promoProdActionGo" ).bind( "click", function( e ) {
        if ( !isRefresh ) {
            dropDownAction( "promoProd", grid, AgreementViewComponent );
        }
         e.stopImmediatePropagation()
    } );
};

},{"../actions/DropdownActions":2,"../actions/GridSaveAction":3}],6:[function(require,module,exports){
/* global $ */
/* global AgreementViewComponent */
var dropDownAction = require( "../actions/DropdownActions" );
var AgreementSave = require( "../actions/GridSaveAction" );

module.exports = function( grid, isRefresh ) {

    $( grid.element ).find( ".grid-add-agreement-command" ).bind( "click", function( e ) {
        grid.addRow();       // do the cancel work
        e.preventDefault();
    } );

     // unbind grid save command
    grid.wrapper.off( "click", ".grid-save-agreement-command" );

    // bind grid save command
    grid.wrapper.on( "click", ".grid-save-agreement-command", $.proxy( AgreementSave, {
        grid: grid,
        options: {
            saveAction: AgreementViewComponent.saveAgreementAction,
            config: AgreementViewComponent.agreementGridConfig,
            dateFields: AgreementViewComponent.agreementDateFields()
        }
    } ) );

    $( grid.element ).find( ".grid-cancel-agreement-command" ).bind( "click", function( e ) {
        grid.cancelChanges();       // do the cancel work
        e.preventDefault();
    } );
    
    $( "#promoActionDropdown" ).kendoDropDownList( {
         optionLabel: "",
         dataTextField: "text",
         dataValueField: "value",
         dataSource: AgreementViewComponent.promotionActionDatasource
     } );   
     
    $( grid.element ).find( ".k-grid-promoActionGo" ).bind( "click", function( e ) {
        if ( !isRefresh ) {
            dropDownAction( "promo", grid, AgreementViewComponent );
        }
        e.stopImmediatePropagation()
    } );
};

},{"../actions/DropdownActions":2,"../actions/GridSaveAction":3}],7:[function(require,module,exports){
/* global Serializer */
/* global AgreementViewComponent */
/* global $ */
var AgreementToolbar = require( "../toolbars/AgreementToolbar" );
var AgreementLineToolbar = require( "../toolbars/AgreementLineToolbar" );

module.exports = ( function() {

	function isEditable( fieldName, model ) {

		// KNDY-4651 no change to type field once the record is saved
	    if ( fieldName == "Type__c" && model.isNew() !== true ) {
			return false;
		} 
	    return true;
	}

	return {
		loadpanelBar: function() {
			$( "#panelBar" ).kendoPanelBar( {
		        expandMode: "multiple"
		    } );
		},

		checkBeforeEdit: function( e ) {
			var columnIndex = this.cellIndex( e.container );
		    var fieldName = this.thead.find( "th" ).eq( columnIndex ).data( "field" );      
		    if ( !isEditable( fieldName, e.model ) ) {
		        e.preventDefault();
		    }
		},

		elementInit: function( ele, isRefresh ) {
			if ( ele.element.context.id == "promotions" ) {               

		        //var row = grid.body.firstChild; // default to first row
		        //console.log(row);
		        //console.log(grid);
		        //grid.select(row);
		        AgreementToolbar( ele, false );
		    } else if ( ele.element.context.id == "pprod" ) {
		        AgreementLineToolbar( ele, false );
		    }
		},

		getAgreementButtons: function() {
			var button = {};

			if ( AgreementViewComponent.planId ) {
				button = { 
					name: "addAgreement", 
					text:"", 
					template: "<input type='button' value='Add New' class='btn grid-add-agreement-command' />" 
				};
			} else {
				button = { 
					name: "addAgreement", 
					text:"", 
					template: "<input type='hidden' value='Add New' class='btn grid-add-agreement-command' />" 
				};
			}
			return button;
		},
		
		reapplyNamespace: function(data, namespace) { 
			// reapply the namespace from json object, recursive
			
			for (var key in data) {
		    	if (typeof key === "string") {
					
					if(key !== "Id" && key !== "Name") {
						var newKey = key.replace(/^/, namespace);
			           	if (newKey !== key) {
			            	data[newKey] = data[key];
			               	delete(data[key]);
			           	}
			           
			           	if (typeof data[newKey] === "object") {
			           		this.reapplyNamespace(data[newKey], namespace);
			           	}
					}
		        }
		    }
		},
		
		convert: function(values) {
	    	for (var key in values) {
	    		// Removes all __r and __custom properties from the record getting saved, as we can't use them in DML
				if (((/__r/i.test(key))) || (/__custom$/i.test(key))) {
	            	delete values[key];
				}
				else if ((/__r/i.test(key))) {	// Remove all __r if the Id is null
					if (values[key] && $.isPlainObject(values[key]) && !values[key].Id) {
						delete values[key];
					}
				}
				
	        	var value = values[key];
	
	            if (value instanceof Date) {
	            	values[key] = (value) ? Date.parse(value) : null;
				}
			}
	        
			return values;
		},
        
        getFieldList: function(fields) {
            var fieldList = JSON.parse(fields);
            $.each(fieldList, function() {
                this.width = this.width ? this.width : '100px';
                //To add a scroll bar, set the width of each column in pixels - KNDY-10623	
            });
            return fieldList;
        },

        GetAGLineDetailsFromProductRef: function(e) {
            debugger;
			var self = this;
            var grid = this.grid;
            var options = self.grid.options;
            var cell = grid.element;
            var row = $(e.target).closest("tr");
            var dataItem = grid.dataItem(row);

            console.log('Entered into my function', e );

            var productReferenceId = dataItem.get('agl.Product_Reference__r.Id') ? dataItem.get('agl.Product_Reference__r.Id') : null;
                    console.log('productReferenceId', productReferenceId);

            var dateFields = $.extend(true, [], options.dateFields);
        
            var agreementId = self.options.parentGrid.Id;
            var agreement = self.options.parentGrid;
            var agmtLines = {};
            var agmtLinesList = [];
            agmtLinesList.push(dataItem.get('agl')); 
            agmtLines = $.map(agmtLinesList, function(item, index) {
                item = item.toJSON();
                item = Serializer.ConvertToSFDCDate(item, { dateFields: dateFields });
                return item;
            });
            if (agmtLines.length > 0) {
            	agmtLines = Serializer.ParameterMap(agmtLines);
            }
            /***
            ** Need to revisit this when needed, for now have used JS object to store the values (omitted null values )that are used in the remote action 
            ****/
            var tmpAgl = {};
            tmpAgl['Agreement__c'] = agmtLines[0]['Agreement__c'];
            tmpAgl['Price_Type__c'] = agmtLines[0]['Price_Type__c'];
            tmpAgl['Product_Type__c'] = agmtLines[0]['Product_Type__c'];
            tmpAgl['Product_Reference__c'] = agmtLines[0]['Product_Reference__c'];
            if(productReferenceId != null)  {
            	debugger;
            	console.log(productReferenceId, agmtLines[0], agreementId);
            	Visualforce.remoting.Manager.invokeAction (
            		AgreementViewComponent.getAglDetailsFromCrossRef,
            		productReferenceId,
            			tmpAgl, 
            			agreementId,
            			function (result, event) {
            				KenandyErp.UnBlockUI();
                                if (event.type == 'exception') {
                                        KenandyErp.Alert("An error occurred while processing your request. Please contact support"); 
                                } else {
                                        KenandyErp.CleanNamespace(result.records, AgreementViewComponent.namespaceUU);
            				
                    					if(result.success) {
                    						if(result.records && result.records.length > 0) {
                    							var agmtLine = result.records[0].agl;   
                                                var productReference = (agmtLine.Product_Reference__c) ? agmtLine.Product_Reference__c : null;
                                                var productReferenceRef = (agmtLine.Product_Reference__r) ? agmtLine.Product_Reference__r : { Id: null, Name: null };
                                                var product = (agmtLine.Product__c) ? agmtLine.Product__c : null;

                                                var productRef = (agmtLine.Product__r) ? agmtLine.Product__r :  { Id: null, Name: null };
                                                var itemRef = (productRef.Item__r) ? productRef.Item__r 
                                                    : { Id: null, Name: null, Fulfillment_Source__c: null};
                                                var itemSpec = (productRef.Item_Specification__c) ? productRef.Item_Specification__c : null;
                                                var itemSpecRef = (productRef.Item_Specification__r) ? productRef.Item_Specification__r : {id: null, name: null};
                                                var priceBook = (agmtLine.Pricebook__c) ? agmtLine.Pricebook__c : null;
                                                var priceBookRef = (agmtLine.Pricebook__r) ? agmtLine.Pricebook__r :  { Id: null, Name: null };
                                                var listPrice = (typeof agmtLine.List_Price__c != 'undefined') ? agmtLine.List_Price__c : null;
                                                
                                                if(priceBook == null) {
                                                    dataItem.agl.set('Pricebook__c', priceBook);
                                                    dataItem.agl.set('Pricebook__r', priceBookRef);

                                                    
                                                }else {
                                                    dataItem.agl.set('List_Price__c', listPrice);
                                                    dataItem.agl.set('Pricebook__c', priceBook);
                                                    dataItem.agl.set('Pricebook__r', priceBookRef);
                                                    dataItem.agl.set('Agreement_Price__c', listPrice);
                                                }
                                                dataItem.agl.set('Product__c', product);
                                                dataItem.agl.set('Product__r', productRef);
                                                dataItem.agl.set('Item_Specification__c', itemSpec);
                                                dataItem.agl.set('Item_Specification__r', itemSpecRef);

                    						}
                    					}
            				    }

            			},
            			{escape: false}
            	);	
            }  
        },
        
        GetAGLineDetailsFromProduct: function(e){
        	debugger;
            var self = this;
            var grid = this.grid;
            var options = self.grid.options;
           // var messageElement = grid.element.closest("div.grid-container").find("div.grid-error-message");
            var cell = grid.element;
            var row = $(e.target).closest("tr");
            var dataItem = grid.dataItem(row);

            console.log('Entered into my function', e );

            var productId = dataItem.get('agl.Product__r.Id') ? dataItem.get('agl.Product__r.Id') : null;
                    console.log('productId', productId);

            var dateFields = $.extend(true, [], options.dateFields);
        
            var agreementId = self.options.parentGrid.Id;
            var agreement = self.options.parentGrid;
            var agmtLines = {};
            var agmtLinesList = [];
            agmtLinesList.push(dataItem.get('agl')); 
            agmtLines = $.map(agmtLinesList, function(item, index) {
                item = item.toJSON();
                item = Serializer.ConvertToSFDCDate(item, { dateFields: dateFields });
                return item;
            });
            if (agmtLines.length > 0) {
            	agmtLines = Serializer.ParameterMap(agmtLines);
            }
            var tmpAgl = {};
            tmpAgl['Agreement__c'] = agmtLines[0]['Agreement__c'];
            tmpAgl['Price_Type__c'] = agmtLines[0]['Price_Type__c'];
            tmpAgl['Product_Type__c'] = agmtLines[0]['Product_Type__c'];
            tmpAgl['Product__c'] = agmtLines[0]['Product__c'];
          
            if(productId != null)  {
            	Visualforce.remoting.Manager.invokeAction (
            		AgreementViewComponent.getAglDetailsFromProduct,
            		productId,
            			tmpAgl, 
            			agreementId,
                        function (result, event) {
            				KenandyErp.UnBlockUI();
                            
                                   if (event.type == 'exception') {
                                        KenandyErp.Alert("An error occurred while processing your request. Please contact support"); 
            				       } else {
                                        KenandyErp.CleanNamespace(result.records, AgreementViewComponent.namespaceUU);
                                   
                    					if(result.success) {
                    						if(result.records && result.records.length > 0) {
                    							var agmtLine = result.records[0].agl;   
                                                var product = (agmtLine.Product__c) ? agmtLine.Product__c : null;
                                                var productRef = (agmtLine.Product__r) ? agmtLine.Product__r : { Id: null, Name: null };
                                                var productReference = (agmtLine.Product_Reference__c) ? agmtLine.Product_Reference__c : null;
                                                var productReferenceRef = (agmtLine.Product_Reference__r) ? agmtLine.Product_Reference__r :  { Id: null, Name: null };
                                                var itemSpec = (productRef.Item_Specification__c) ? productRef.Item_Specification__c : null;
                                                var itemSpecRef = (productRef.Item_Specification__r) ? productRef.Item_Specification__r : {id: null, name: null};
                                                var priceBook = (agmtLine.Pricebook__c) ? agmtLine.Pricebook__c : null;
                                                var priceBookRef = (agmtLine.Pricebook__r) ? agmtLine.Pricebook__r :  { Id: null, Name: null };
                                                var listPrice = (typeof agmtLine.List_Price__c != 'undefined') ? agmtLine.List_Price__c : null;
                                                
                                                if(priceBook == null) {
                                                    dataItem.agl.set('Pricebook__c', priceBook);
                                                    dataItem.agl.set('Pricebook__r', priceBookRef);

                                                    
                                                }else {
                                                    dataItem.agl.set('List_Price__c', listPrice);
                                                    dataItem.agl.set('Pricebook__c', priceBook);
                                                    dataItem.agl.set('Pricebook__r', priceBookRef);
                                                    dataItem.agl.set('Agreement_Price__c', listPrice);
                                                }
                                                 dataItem.agl.set('Item_Specification__c', itemSpec);
                                                 dataItem.agl.set('Item_Specification__r', itemSpecRef);
                                             	 dataItem.agl.set('Product_Reference__c', productReference);
                                             	 dataItem.agl.set('Product_Reference__r', productReferenceRef);
                                                
                    						}
                    					}
            				        }

            			},
            			{escape: false}
            	);	
            }  
        }                 

	};
} )();

},{"../toolbars/AgreementLineToolbar":5,"../toolbars/AgreementToolbar":6}],8:[function(require,module,exports){
/* global Visualforce */
/* global _ */
/* global KenandyErp */
/* global KendoGridUtils */
var GridActionListActions = ( function() {
	return {

		Save: function( e ) {
			var self = this;
			var grid = self.grid;
			var messageElement = grid.element
				.closest( "div.grid-container" )
				.find( "div.grid-message" );
			var gridUtils = new KendoGridUtils( grid, self.options );
			if ( !gridUtils.IsValid() ) {
                e.preventDefault();
                return;
            }

			if ( !gridUtils.HasChanges() ) {
				KenandyErp.Message( "No records changed.", 
					KenandyErp.MessageType.Info, 
					messageElement );
				return;
			}

			var updatedRows = gridUtils.UpdatedRows();
			var newRows = gridUtils.NewRows();
			var deletedRows = gridUtils.DeletedRows();
			var changeListIds = _.union( _.pluck( updatedRows, "Id" ), 
				_.pluck( deletedRows, "Id" ) );

			KenandyErp.BlockUI( grid.element );		
			Visualforce.remoting.Manager.invokeAction(
				self.options.saveAction,
				self.options.config,        
				updatedRows,
				newRows,
				deletedRows,
				function( result, event ) {
					KenandyErp.UnBlockUI( grid.element );	    	
					if ( event.type == "exception" ) {
						KenandyErp.Message( event.message, 
							KenandyErp.MessageType.Error, 
							messageElement );
					} else {
						if ( result.success ) {
							var newIds = _.difference( 
								_.pluck( result.records, "Id" ), 
								changeListIds );

							//refresh the grid
							grid.dataSource._destroyed = [];
							grid.dataSource.read( { newIds: newIds } );		

							// trigger onsavesuccess
							grid.element.trigger( "OnSaveSuccess" );		
							KenandyErp.Messages( result.messages, messageElement );
						} else {
							KenandyErp.Messages( result.messages, messageElement );
						}
					}
				},
				{ escape: false }
			);
		}
	};
} )();

module.GridActionList = ( function( $ ) {
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        CHANGE = "change";
        ONREADFAILURE = "OnReadFailure";
        ONREADSUCCESS = "OnReadSuccess";

	var GridActionList = ui.Grid.extend( {
		_config: null,
		_fieldList: null,
		_standardButtons: null,
		_namespace: null,
		_referenceFields: null,
		_dateFields: null,
		_nestedFields: null,
		_lookupSearchFilters: null,
		_modelIdField: null,
		_getActionListFunction: null,
		_allowMassDelete: null,
		_showIconButtons: null,

        // method called when a new widget is created
        init: function( element, options ) {
            var that = this;

			that._initDefaults( options );

            var getModel = function() {
	            var fields = KenandyErp.KendoGridOptions.GetFields( _fieldList );
				
	            // Add schema for checkbox column
				fields.isSelected__custom = { type: "boolean" };

				var model = kendo.data.Model.define( { id: _modelIdField, fields: fields } );

				return model;
			};
					
			var getColumns = function() {
	            var columns = KenandyErp.KendoGridOptions.GetColumns(
					_fieldList,
					{ lookupSearchAction: options.lookupSearchAction,
						buttons: _standardButtons,
						lookupSearchFilters: _lookupSearchFilters,
						allowMassDelete: _allowMassDelete,
						validateLookupOnBlur: options.validateLookupOnBlur
				} );
	            
	            $.each(_.where(columns, {field: "Name"}), function(index, item) {
					item.template = kendo.template('<a target="_top" href="/#=Id#" />#= Name #</a>');
				});
				
				$.each(columns, function(index, item) {
					if ( item.format == "{0:M/d/yyyy h:mm tt}") {
						item.format = "{0:M/d/yyyy}"
					}
				});
				
				columns.unshift(
					{ field: "",
						filterable: false,
						sortable: false,
						width: 30,
						attributes: { class: "kndy-text-left" },
						headerAttributes: { class: "kndy-text-left" }
				} );

				return columns;
			};

			var getToolbarButtons = function() {
				var buttons = KenandyErp.KendoGridOptions.GetToolbarButtons( 
					_standardButtons,
					{ showIconButtons: _showIconButtons,
						allowMassDelete: _allowMassDelete
				} );
				
				buttons = _.union( buttons, options.toolbarButtons );
				return buttons;
			};

			var getDataSource = function() {
				var dataSource = new kendo.data.DataSource( {
					transport: {
						read: function( options ) {
							KenandyErp.BlockUI( element );

							var promise = _getActionListFunction( options.data.readOptions );
							promise.done( function( result, event ) {
								KenandyErp.UnBlockUI( element );

						        	if ( event.type == "exception" ) {
										KenandyErp.Alert( "An error occurred while processing your request." +
											 "Please contact support" );

										// trigger onreadfailure
									    $( element ).trigger( {
									        type: ONREADFAILURE,
									        result: result, 
									        event: event 
									    } );
									} else {
										KenandyErp.CleanNamespace( result.records, _namespace );
						            	options.success( result.records );
						            	
						            	// trigger onreadsuccess
									    $( element ).trigger( {
									        type: ONREADSUCCESS,
									        result: result, 
									        event: event 
									    } );
									}
					            } );
						}
					},
					batch: true,
					pageSize: ( _config.pageSize ) ? _config.pageSize : KenandyErp.KendoGridOptions.DefaultPageSize,
					schema: {
						model: getModel(),
						parse:function( response ) {
			                $.each( response, function( idx, item ) {
			                	item = Serializer.IncludeNulls( item, { fields: _nestedFields } );
	                    		item = Serializer.ConvertFromSFDCDate( item, { dateFields: _dateFields } );
						    } );
						    
			                return response;
						}         	
					},
					aggregate: options.aggregates ? options.aggregates : null    	
				} );
	
				return dataSource;
			};
				
            var defaultOptions = {
	        	dataSource: getDataSource(), 
	        	navigatable: true,
	        	pageable: { 
	        		input: true,
	                numeric: false,
	        		pageSizes: KenandyErp.KendoGridOptions.PageSizes,
	        		messages: {
	        			display: '{0} - {1} of {2} records',
	        			empty: '',
	        			itemsPerPage: 'records per page'
	        		}
				},		
		        toolbar: getToolbarButtons(),
		        columns: getColumns(),
		        sortable: true,
				filterable: true,
				resizable: true,
				editable: true,
                scrollable: _config.scrollable ? _config.scrollable : true
	        };
	        
	        options = $.extend( {}, defaultOptions, options );
	        
            if ( $( element ).data( 'kendoGrid' ) !== null && $( element ).data( 'kendoGrid' ) !== undefined ) { 
                $( element ).data( 'kendoGrid' ).destroy(); 
            }
            
            ui.Grid.fn.init.call( that, element, options );
			
			$( element ).data( "kendoGrid", that );
			
			that._initEvents();
        },
        
        // widget options
        options: {
            name: "GridActionList",
            config: null,
            fieldList: null,
            namespace: null,
            lookupSearchAction: null,
            getActionListFunction: null,
            saveActionListAction: null,
            addRowAction: null,
            lookupSearchFilters: [],
            modelIdField: 'Id',
            allowMassDelete: true,
            showIconButtons: false,
            toolbarButtons: [],
            validateLookupOnBlur: false
        },
        
        // events the control can fire
		events: [ CHANGE ],
		
		_initDefaults: function( options ) {
			var that = this;
			
			_config = JSONUtils.Parse( options.config );
			_fieldList = JSONUtils.Parse( options.fieldList );
			_standardButtons = $.map( _config.buttons.split( ',' ), $.trim );
			_namespace = _config.namespace ? _config.namespace : options.namespace;
			_referenceFields = KenandyErp.KendoGridOptions.GetReferenceFields( _fieldList ); // get the list of reference fields
			_dateFields = KenandyErp.KendoGridOptions.GetDateFields( _fieldList ); // get the list of date fields
			_lookupSearchFilters = ( options.lookupSearchFilters ) ? options.lookupSearchFilters : [];
			_nestedFields = KenandyErp.KendoGridOptions.GetNestedFields( _fieldList ); // get the list of nested fields
			_modelIdField = options.modelIdField ? options.modelIdField : 'Id';
			_getActionListFunction = options.getActionListFunction;
			_showIconButtons = ( options.showIconButtons ) ? options.showIconButtons : that.options.showIconButtons;
			_allowMassDelete = ( options.allowMassDelete ) ? options.allowMassDelete : that.options.allowMassDelete;
		},
		
		_initEvents: function() {
			var that = this;
			var grid = that;
			
			// bind grid edit event
			grid.bind( 'edit', $.proxy( KenandyErp.KendoGridActions.Edit, { referenceFields: _referenceFields } ) );
				
			// bind grid dataBound event
			grid.bind( 'dataBound', KenandyErp.KendoGridActions.DataBound );
				
			// bind click events to the custom buttons
			KenandyErp.KendoGridOptions.BindEvents( grid, _standardButtons, { saveAction: that.options.saveActionListAction, addRowAction: that.options.addRowAction, referenceFields: _referenceFields, config: _config, dateFields: _dateFields, ignoreBindings: [ KenandyErp.KendoGridOptions.CommandType.Save ] } );

			// set the grid height
			if ( that.options.height ) {
				grid.wrapper.height( that.options.height );
			}
			
			grid.wrapper.on( "click", ".grid-save-command", $.proxy( GridActionListActions.Save, { grid: grid, options: { saveAction: that.options.saveActionListAction, config: _config } } ) );
			grid.thead.on( "click", ".grid-select-all", $.proxy( KenandyErp.KendoGridActions.SelectAll, { grid: grid } ) );
			grid.tbody.on( "change", ".grid-select-one", $.proxy( KenandyErp.KendoGridActions.Select, { grid: grid } ) );
			
			grid.bind( 'dataBound', function() {
				var isSelected = ( grid.tbody.find( '.grid-select-one' ).length > 0 && !grid.tbody.find( '.grid-select-one' ).is( ':not(:checked)' ) ) ? true : false;
				grid.thead.find( '.grid-select-all' ).prop( 'checked', isSelected );
			} );
		}
	} );

	ui.plugin( GridActionList );
} )( jQuery );

},{}],9:[function(require,module,exports){
var GridDetailListActions = function() {
	
	return {
	
		Save: function( e ) {
   			var self = this;
   			var grid = self.grid;
   			var messageElement = grid.element.closest( "div.grid-container" ).find( "div.grid-message" );
   			
			var gridUtils = new KendoGridUtils( grid, self.options );
							
			if ( !gridUtils.IsValid() ) {
                e.preventDefault();
                return;
            }
		 		
        	if ( !gridUtils.HasChanges() ) {
        		KenandyErp.Message( "No records changed.", KenandyErp.MessageType.Info, messageElement );
        		return;
        	}
        	
        	var updatedRows = gridUtils.UpdatedRows();
        	var newRows = gridUtils.NewRows();
        	var deletedRows = gridUtils.DeletedRows();
        	var changeListIds = _.union( _.pluck( updatedRows, 'Id' ), _.pluck( deletedRows, 'Id' ) );
        	
			KenandyErp.BlockUI( grid.element );
							
			Visualforce.remoting.Manager.invokeAction(
		    	self.options.saveAction,
		    	self.options.detailConfig,			     	        
				updatedRows, 
				newRows, 
				deletedRows, 
				function( result, event ) {
					KenandyErp.UnBlockUI( grid.element );
						    	
					if ( event.type == 'exception' ) {
						KenandyErp.Message( event.message, KenandyErp.MessageType.Error, messageElement );
					} else {
						if ( result.success ) {
							var newIds = _.difference( _.pluck( result.records, 'Id' ), changeListIds );
							
							//refresh the grid
	                		grid.dataSource._destroyed = [];
	                		grid.dataSource.read( { newIds: newIds } );
										
							// trigger onsavesuccess
							grid.element.trigger( "OnSaveSuccess" );
										
							KenandyErp.Messages( result.messages, messageElement );
						} else {
							KenandyErp.Messages( result.messages, messageElement );
						}
					}
				},
				{ escape: false }
			);
   		}
	};
}();
module.GridActionList = ( function( $ ) {
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        CHANGE = "change";
        ONREADFAILURE = "OnReadFailure";
        ONREADSUCCESS = "OnReadSuccess";

	var GridDetailList = ui.Grid.extend( {
		_detailConfig: null,
		_detailFieldList: null,
		_standardButtons: null,
		_detailNamespace: null,
		_detailReferenceFields: null,
		_detailDateFields: null,
		_detailNestedFields: null,
		_lookupSearchFilters: null,
		_detailModelIdField: null,
		_getDetailListFunction: null,
		_detailAllowMassDelete: null,
		_detailShowIconButtons: null,
		
        // method called when a new widget is created
        init: function( element, options ) {
            var that = this;
            
			that._initDefaults( options );
			
            var getDetailModel = function() {
	            var fields = KenandyErp.KendoGridOptions.GetFields( _detailFieldList );	
	
	            // Add schema for checkbox column
				fields.IsSelected__custom = { type: "boolean" };
								
				var model = kendo.data.Model.define( { id: _detailModelIdField, fields: fields } );
						
				return model;
			};
					
			var getDetailColumns = function() {
	            var columns = KenandyErp.KendoGridOptions.GetColumns( _detailFieldList, { lookupSearchAction: options.lookupSearchAction, buttons: _standardButtons, lookupSearchFilters: _lookupSearchFilters, detailAllowMassDelete: _detailAllowMassDelete, detailValidateOnBlur: options.detailValidateOnBlur } );
	            
	            // Add checkbox column
				columns.unshift( { field: 'IsSelected__custom', filterable: false, sortable: false,  width: 30, attributes: { class: 'kndy-text-left' }, headerAttributes: { class: 'kndy-text-left' } } ); //template: "<input type='checkbox' data-bind='IsSelected__custom' #= IsSelected__custom ? checked='checked': '' # class='grid-select-one' />", headerTemplate: "<input type='checkbox' class='grid-select-all' />",
					
				return columns;
			};
			
			var getDetailToolbarButtons = function() {
				var buttons = KenandyErp.KendoGridOptions.GetToolbarButtons( _standardButtons, { detailShowIconButtons: _detailShowIconButtons, detailAllowMassDelete: _detailAllowMassDelete } );
				
				buttons = _.union( buttons, options.detailToolbarButtons );
				return buttons;
			};
			
			var getDetailDataSource = function() {
				var dataSource = new kendo.data.DataSource( {
					transport: {
						read: function( options ) {
							KenandyErp.BlockUI( element );
							
							var promise = _getDetailListFunction( options.data.readOptions );
							promise.done( function( result, event ) {
					            	KenandyErp.UnBlockUI( element );
					            	
						        	if ( event.type == 'exception' ) {
						        		KenandyErp.Alert( "An error occurred while processing your request. Please contact support" ); 
							        		
						        		// trigger onreadfailure
									    $( element ).trigger( {
									        type: ONREADFAILURE,
									        result: result, 
									        event: event 
									    } );
									} else {
										KenandyErp.CleanNamespace( result.records, _detailNamespace );
						            	options.success( result.records );
						            	
						            	// trigger onreadsuccess
									    $( element ).trigger( {
									        type: ONREADSUCCESS,
									        result: result, 
									        event: event 
									    } );
									}
					            } );
						}
					},
					batch: true,
					pageSize: ( _detailConfig.pageSize ) ? _detailConfig.pageSize : KenandyErp.KendoGridOptions.DefaultPageSize,
					schema: {
						model: getDetailModel(),
						parse:function( response ) {
			                $.each( response, function( idx, item ) {
			                	item = Serializer.IncludeNulls( item, { fields: _detailNestedFields } );
	                    		item = Serializer.ConvertFromSFDCDate( item, { dateFields: _detailDateFields } );
						    } );
						    
			                return response;
						}         	
					},
					aggregate: options.aggregates ? options.aggregates : null    	
				} );
	
				return dataSource;
			};
				
            var defaultOptions = {
	        	dataSource: getDetailDataSource(), 
	        	navigatable: true,
	        	pageable: { 
	        		input: true,
	                numeric: false,
	        		pageSizes: KenandyErp.KendoGridOptions.PageSizes,
	        		messages: {
	        			display: '{0} - {1} of {2} records',
	        			empty: '',
	        			itemsPerPage: 'records per page'
	        		}
				},		
		        toolbar: getDetailToolbarButtons(),
		        columns: getDetailColumns(),
		        sortable: true,
				filterable: true,
				resizable: true,
				editable: true
	        };
	        
	        options = $.extend( {}, defaultOptions, options );
	        
            if ( $( element ).data( 'kendoGrid' ) !== null ) { 
                $( element ).data( 'kendoGrid' ).destroy(); 
            }
            
            ui.Grid.fn.init.call( that, element, options );
			
			$( element ).data( "kendoGrid", that );
			
			that._initEvents();
        },
        
        // widget options
        options: {
            name: "GridDetailList",
            detailConfig: null,
            detailFieldList: null,
            detailNamespace: null,
            lookupSearchAction: null,
            getDetailListFunction: null,
            saveDetailListAction: null,
            detailAddRowAction: null,
            lookupSearchFilters: [],
            detailModeIdField: 'Id',
            detailAllowMassDelete: true,
            detailShowIconButtons: false,
            detailToolbarButtons: [],
            detailValidateOnBlur: false
        },
        
        // events the control can fire
		events: [ CHANGE ],
		
		_initDefaults: function( options ) {
			var that = this;
			
			_detailConfig = JSONUtils.Parse( options.detailConfig );
			_detailFieldList = JSONUtils.Parse( options.detailFieldList );
			_standardButtons = $.map( _detailConfig.buttons.split( ',' ), $.trim );
			_detailNamespace = _detailConfig.detailNamespace ? _detailConfig.detailNamespace : options.detailNamespace;
			_detailReferenceFields = KenandyErp.KendoGridOptions.GetReferenceFields( _detailFieldList ); // get the list of reference fields
			_detailDateFields = KenandyErp.KendoGridOptions.GetDateFields( _detailFieldList ); // get the list of date fields
			_lookupSearchFilters = ( options.lookupSearchFilters ) ? options.lookupSearchFilters : [];
			_detailNestedFields = KenandyErp.KendoGridOptions.GetNestedFields( _detailFieldList ); // get the list of nested fields
			_detailModelIdField = options.detailModeIdField ? options.detailModeIdField : 'Id';
			_getDetailListFunction = options.getDetailListFunction;
			_detailShowIconButtons = ( options.detailShowIconButtons ) ? options.detailShowIconButtons : that.options.detailShowIconButtons;
			_detailAllowMassDelete = ( options.detailAllowMassDelete ) ? options.detailAllowMassDelete : that.options.detailAllowMassDelete;
		},
		
		_initEvents: function() {
			var that = this;
			var grid = that;
			
			// bind grid edit event
			grid.bind( 'edit', $.proxy( KenandyErp.KendoGridActions.Edit, { referenceFields: _detailReferenceFields } ) );
				
			// bind grid dataBound event
			grid.bind( 'dataBound', KenandyErp.KendoGridActions.DataBound );
				
			// bind click events to the custom buttons
			KenandyErp.KendoGridOptions.BindEvents( grid, _standardButtons, { saveAction: that.options.saveDetailListAction, detailAddRowAction: that.options.detailAddRowAction, referenceFields: _detailReferenceFields, detailConfig: _detailConfig, dateFields: _detailDateFields, ignoreBindings: [ KenandyErp.KendoGridOptions.CommandType.Save ] } );

			// set the grid height
			if ( that.options.height ) {
				grid.wrapper.height( that.options.height );
			}
			
			grid.wrapper.on( "click", ".grid-save-command", $.proxy( GridDetailListActions.Save, { grid: grid, options: { saveAction: that.options.saveDetailListAction, detailConfig: _detailConfig } } ) );
			grid.thead.on( "click", ".grid-select-all", $.proxy( KenandyErp.KendoGridActions.SelectAll, { grid: grid } ) );
			grid.tbody.on( "change", ".grid-select-one", $.proxy( KenandyErp.KendoGridActions.Select, { grid: grid } ) );
			
			grid.bind( 'dataBound', function() {
				var isSelected = ( grid.tbody.find( '.grid-select-one' ).length > 0 && !grid.tbody.find( '.grid-select-one' ).is( ':not(:checked)' ) ) ? true : false;
				grid.thead.find( '.grid-select-all' ).prop( 'checked', isSelected );
			} );
		}
	} );

	ui.plugin( GridDetailList );
} )( jQuery );

},{}],10:[function(require,module,exports){
/* global PlanView */
/* global $ */
/* global AgreementViewComponent */
var utility = require( "../utils/AgreementViewHelper" );
var drawSecondGrid = require( "./AgreementLineGrid" );
var drawTreeList = require( "./AgreementLineTreeList" );
require( "../utils/GridActionList" );

module.exports = function() {

	var agreementData = function() {
        var deferred = $.Deferred();

        Visualforce.remoting.Manager.invokeAction(
            AgreementViewComponent.getAgreementData,
            AgreementViewComponent.agreementId,
            AgreementViewComponent.planId,
            function( result, event ) {
                deferred.resolve( result, event );
            },
            { escape: false }
        );

        return deferred.promise();
    };
    
    var grid = $( '#promotions' ).width( $( '#mainpage' ).width()).kendoGridActionList( {
        selectable: true,
        config: AgreementViewComponent.agreementGridConfig,
        namespace: AgreementViewComponent.namespaceUU, 
        fieldList: utility.getFieldList(AgreementViewComponent.agreementFieldList),
        getActionListFunction: agreementData,
        allowMassDelete: false,
        lookupSearchAction: AgreementViewComponent.lookupSearchAction,
        lookupSearchFilters: AgreementViewComponent.agreementLookupSearchFilters,
        toolbarButtons: [
                utility.getAgreementButtons(),
                { name: "grid-save-agreement-command",
                    text:"",
                    template: "<input type='button' value='Save Changes' class='btn grid-save-agreement-command' />" },
                { name: "grid-cancel-agreement-command",
                    text:"",
                    template: "<input type='button' value='Cancel Changes' class='btn grid-cancel-agreement-command' />" },
                { name:"formatLabel",
                    template: "<label style='padding-left: 50px; padding-right: 5px;'>" +
                        AgreementViewComponent.actionLabel +
                        ":</label>" },
                { name:"promoActionDropdown",
                    template: "<input id='promoActionDropdown' style='width: 225px;' />",
                    overflow: "never" },
            	{ name:"promoActionGo",
                    text: AgreementViewComponent.goLabel }           	   
        ],
        beforeEdit: utility.checkBeforeEdit

    } ).data( "kendoGridActionList" );

	grid.bind( "dataBound", function( e ) {
        if ( !$( "#pprod" ).data( "kendoTreeList" ) ) {
            drawTreeList( grid.dataSource._data[ 0 ] );
        }      
	} );

    //agreementData.done(function(result, event){
    utility.elementInit( grid, false );

    grid.bind( "edit", function( e ) {
        if ( e.model.isNew() ) {                     // if row is new, then set defaults
            e.model.set( "Plan__c", AgreementViewComponent.planId );
            e.model.set( "Start_Date__c", KenandyErp.ParseSFDCDate( PlanView.planStart ) );
            e.model.set( "End_Date__c", KenandyErp.ParseSFDCDate( PlanView.planEnd ) );
            e.model.set( "Approval_Date__c", null );
            e.model.set( "Activation_Date__c", null );
        }
        if( $( e.container ).find('input[name="Bill_To__c"]').length > 0 ) {
            var lookupSearchFilters = [];
            var customer = AgreementViewComponent.theAgreement.Customer__c; 
            lookupSearchFilters.push( {field: "Bill_To__c", filter: "RecordType.DeveloperName  = \'Bill_To\' AND Top_Parent_Customer__c = '" + customer + "' " });
            $(e.container).find('input[name="Bill_To__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
        }
        if( $( e.container ).find('input[name="Sold_To__c"]').length > 0 ) {
            var lookupSearchFilters = [];
            var customer = AgreementViewComponent.theAgreement.Customer__c; 
            lookupSearchFilters.push( {field: "Sold_To__c", filter: "RecordType.DeveloperName  = \'Sold_To\' AND Top_Parent_Customer__c = '" + customer + "' " });
            $(e.container).find('input[name="Sold_To__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
        }
        if( $( e.container ).find('input[name="Ship_To__c"]').length > 0 ) {
            var lookupSearchFilters = [];
            var customer = AgreementViewComponent.theAgreement.Customer__c; 
            lookupSearchFilters.push( {field: "Ship_To__c", filter: "RecordType.DeveloperName  = \'Ship_To\' AND Top_Parent_Customer__c = '" + customer + "' " });
            $(e.container).find('input[name="Ship_To__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
        }
        if( $( e.container ).find('input[name="Site__c"]').length > 0 ) {
            var lookupSearchFilters = [];
            var customer = AgreementViewComponent.theAgreement.Customer__c; 
            lookupSearchFilters.push( {field: "Site__c", filter: "RecordType.DeveloperName  = \'Site\' AND Top_Parent_Customer__c = '" + customer + "' " });
            $(e.container).find('input[name="Site__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
        }
        
        if( $( e.container ).find('input[name="Customer__c"]').length > 0 ) {
            var lookupSearchFilters = [];
            
            if ( e.model.get( "Customer_Type__c" ) == "Bill To" || e.model.get( "Customer_Type__c" ) == "Sold To" ) {
                if ( e.model.get( "Customer_Type__c" ) == "Bill To" ) {
                    lookupSearchFilters.push( {field: "Customer__c", filter: "RecordType.DeveloperName  = \'Bill_To\'" });
                }
                
                if ( e.model.get( "Customer_Type__c" ) == "Sold To") {
                    lookupSearchFilters.push( {field: "Customer__c", filter: "RecordType.DeveloperName  = \'Sold_To\'" });
                }
                
                $(e.container).find('input[name="Customer__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
            }
        }
        //Commenting out following code since it doesnt allow to navigate to any other control.  
        /*if( $( e.container ).find('input[data-role="datetimepicker"]').length > 0 ) {
           var dateTimePicker =  $( e.container ).find('input[data-role="datetimepicker"]').data("kendoDateTimePicker");
           dateTimePicker.setOptions({ format: "M/d/yyyy", parseFormats: "M/d/yyyy hh:mm"});
        }*/
        
    } );

    grid.bind( "change", function( e ) {
                
        var item = { Id: AgreementViewComponent.promotionPrefix };

        var selectedItem = this.dataItem( this.select() );

        if ( typeof selectedItem !== "undefined" ) {
            if ( selectedItem !== null ) {
                item = selectedItem;
            }
        }

        //   first time                   OR   changing
        if ( AgreementViewComponent.theAgreement.Id != item.Id ) {

            $.each( AgreementViewComponent.promoActionConfig, function() {

                var regex = /\?[a-zA-Z0-9=]*/;
              
                this.content = this.content && this.content.replace( regex, "?id=" + item.id );

            } );

            AgreementViewComponent.theAgreement = item;

            $( "#pprod" ).data( "kendoTreeList" ).dataSource.read();
            $( "#pprod" ).data( "kendoTreeList" ).refresh();
        } else {
            e.preventDefault();
        } 
    } );

    //});
};

},{"../utils/AgreementViewHelper":7,"../utils/GridActionList":8,"./AgreementLineGrid":11,"./AgreementLineTreeList":12}],11:[function(require,module,exports){
/* global KenandyErp */
/* global AgreementViewComponent */
/* global Visualforce */
var utility = require( '../utils/AgreementViewHelper' );
require( '../utils/GridDetailList' );

module.exports = function( agreement ) {

    var agreementLineData = function() {

        if ( AgreementViewComponent.theAgreement.Id !== '') {
            agreement = AgreementViewComponent.theAgreement;
        }

        var deferred = $.Deferred();
        
        Visualforce.remoting.Manager.invokeAction(
            AgreementViewComponent.getAgreementLineData,
            agreement.Id, 
            AgreementViewComponent.allFields,
            function( result, event ) {
                deferred.resolve( result, event );
            },
            { escape: false }
        );

        return deferred.promise();
    };

    var grid = $( '#pprod' ).kendoGridDetailList( {
        selectable: true,
        detailConfig: AgreementViewComponent.agreementLinesGridConfig,
        detailNamespace: AgreementViewComponent.namespaceUU, 
        detailFieldList: AgreementViewComponent.agreementLineFieldList,
        getDetailListFunction: agreementLineData,
        scrollable: true,
        lookupSearchAction: AgreementViewComponent.lookupSearchAction,
        lookupSearchFilters: AgreementViewComponent.agreementLineLookupSearchFilters,
        detailToolbarButtons: [
                    { name: "grid-add-line-command", text:"", template: "<input type='button' value='Add New' class='btn grid-add-line-command' />" },
                    { name: "grid-save-line-command", text:"", template: "<input type='button' value='Save Changes' class='btn grid-save-line-command' />" },
                    { name: "grid-cancel-line-command", text:"", template: "<input type='button' value='Cancel Changes' class='btn grid-cancel-line-command' />" },
                    { name:"formatLabel", template: "<label style='padding-left: 50px; padding-right: 5px;'>" + AgreementViewComponent.actionLabel + ":</label>" },
                    { name:"promoProdActionDropdown", template: "<input id='promoProdActionDropdown' style='width: 225px;' />", overflow: "never" },
                    { name:"promoProdActionGo", text:AgreementViewComponent.goLabel }                                             
                 ],                        
        change: function( e ) {
            var item = { Id: AgreementViewComponent.promoProdPrefix };
            
            var selectedItem = this.dataItem( this.select() );  
            
            if ( typeof selectedItem !== "undefined" ) {
                if ( selectedItem !== null ) {
						item = selectedItem; 	                            
                }
            }     
            
            if ( AgreementViewComponent.promotedProd != item ) {           //  see if this really changed ?
                AgreementViewComponent.promotedProd = item;
                
                $.each( AgreementViewComponent.promoProdActionConfig, function() {

                    var regex = /=[a-zA-Z0-9]*/;
                    this.content = this.content && this.content.replace( regex, '=' + item.id );
                    
                } );
            }
        }
    } ).data( 'kendoGridDetailList' );
    
    //agreementLineData.done(function(result, event){
    utility.elementInit( grid, false );
    grid.bind( 'edit', function( e ) {
        if ( e.model.isNew() ) {                     // if row is new, then set defaults

            e.model.set( 'Agreement__c', agreement.Id );
            e.model.set( 'Start_Date__c', KenandyErp.ParseSFDCDate( agreement.Start_Date__c ) );
            e.model.set( 'End_Date__c', KenandyErp.ParseSFDCDate( agreement.End_Date__c ) );

            // no edit on thias lookup
            // $.proxy(KenandyErp.KendoGridActions.Edit, { referenceFields: ['Product_Hierarchy__c'] })
        }
    } );

    //});   
};

},{"../utils/AgreementViewHelper":7,"../utils/GridDetailList":9}],12:[function(require,module,exports){
/* global Visualforce */
/* global expandedRows */
/* global ONREADSUCCESS */
/* global ONREADFAILURE */
/* global AgreementViewComponent */
/* global JSONUtils */
/* global KenandyErp */
/* global Serializer */
/// <reference path="../../typings/tsd.d.ts" />
var utility = require( "../utils/AgreementViewHelper" );
var save = require( "../actions/TreeListSaveAction" );

module.exports = function( agreement ) {
    var agreementLineFieldListParsed = utility.getFieldList(AgreementViewComponent.agreementLineFieldList);

    var agreementLineDateFieldsParsed = JSONUtils.Parse(
        AgreementViewComponent.agreementLineDateFields() );

    var _nestedFields = KenandyErp.KendoGridOptions.GetNestedFields(
        agreementLineFieldListParsed ); // get the list of nested fields

    var agreementLineData = function() {

        if ( AgreementViewComponent.theAgreement.Id !== "" )  {
            agreement = AgreementViewComponent.theAgreement;
        }

        var deferred = $.Deferred();

        Visualforce.remoting.Manager.invokeAction(
            AgreementViewComponent.getAgreementLineData,
            agreement.Id,
            AgreementViewComponent.allFields,
            function( result, event ) {
                deferred.resolve( result, event );
            },
            { escape: false }
        );

        return deferred.promise();
    };

    var columns = KenandyErp.KendoGridOptions.GetColumns(
        agreementLineFieldListParsed,
        { lookupSearchAction: AgreementViewComponent.lookupSearchAction,
            buttons: null,
            lookupSearchFilters: AgreementViewComponent.agreementLineLookupSearchFilters,
            allowMassDelete: null,
            validateOnBlur: null
        } );
        
    columns.shift( 0 );
    
    if(agreement.Status__c == "Approved") {
        columns.unshift( { command: [ "edit" ],
                    attributes: {
                        style: "text-align: center;",
                    },
                    width: "100px",
                } );
        columns.push( { command: [ "edit" ],
                    attributes: {
                        style: "text-align: center;",
                    },
                    width: "100px"
                } );
    }
    else {
        columns.unshift( { command: [ "edit", "destroy" ],
                    attributes: {
                        style: "text-align: center;",
                    },
                    width: "100px"
                } );
         columns.push( { command: [ "edit", "destroy" ],
                    attributes: {
                        style: "text-align: center;",
                    },
                    width: "100px"
                } );
    }
    
    columns[1].expandable = true;
    
   //Hack for header formatting on columns missing it
   $.each( columns, function( index, item ) {
       if ( item.headerAttributes ) {
           item.headerAttributes.class = item.headerAttributes.class + " k-header";
       }
       if ( item.field !== "" ) {
           item.filterable = true;
       }
       if ( item.field == 'agl.Name') {
           item.template = kendo.template('<a target="_top" href="/#=agl.Id#" />#= agl.Name #</a>');
       }
       if ( item.field == "agl.Total_Value_FC__c" ) {
           item.template = "#= (agl.Total_Value_FC__c === null) ? ' ' : agl.Total_Value_FC__c #";
       }
       if ( item.field == "agl.Margin__c" ) {
           item.template = "#= (agl.Margin__c === null) ? ' ' : agl.Margin__c #";
       }
       if ( item.field == "agl.Group_Number__c" ) {
           item.template = "#= (agl.Group_Number__c === null) ? ' ' : agl.Group_Number__c #";
       }
       if ( item.field == "agl.Margin_Cost__c" ) {
           item.template = "#= (agl.Margin_Cost__c === null) ? ' ' : agl.Margin_Cost__c #";
       }
       if ( item.field == "agl.Occurence_Count__c" ) {
           item.template = "#= (agl.Occurence_Count__c=== null) ? ' ' : agl.Occurence_Count__c #";
       }
       if ( item.field == "agl.Product__c" ) {
           item.headerAttributes = {
               style: "min-width: 150px"
           }
       }
       if ( item.field == 'agl.Variation_Percentage__c'){
           item.template   = "#if(agl.Agreement_Price__c >= agl.List_Price__c){# <span class='agreementlinevariationpercentageless'>#=kendo.toString(agl.Variation_Percentage__c, '0.00')#</span> #} else if (agl.Variation_Percentage__c <= AgreementViewComponent.thresholdpercentagevalue){#  <span class='agreementlinevariationpercentagemoderate'>#=kendo.toString(agl.Variation_Percentage__c, '0.00') # </span>#} else {# <span class='agreementlinevariationpercentagemore'>#=kendo.toString(agl.Variation_Percentage__c, '0.00') # </span>#}# ";
       }       
       if ( item.format == "{0:M/d/yyyy h:mm tt}") {
           item.format = "{0:M/d/yyyy}"
       }
       
   } );
    
   
    var fields = KenandyErp.KendoGridOptions.GetFields( agreementLineFieldListParsed );
    $.each( fields, function( i, v ) {
        delete v.validation;
    } );
    fields.parentId = { "field": "agl.Parent_Agreement_Line__c", "nullable": true };

    var model = {};
    model.id = "agl.Id";
    model.fields = fields;
    model.expanded = false;

    var dataSource = new kendo.data.TreeListDataSource( {
        transport: {
            read: function( options ) {
                KenandyErp.BlockUI( "#pprod" );

                var promise = agreementLineData( options.data.readOptions );
                promise.done( function( result, event ) {
                        KenandyErp.UnBlockUI( "#pprod" );
                        //setting agreementlines grid width as per parent cotainer outerWidth
                        $('#pprod').width($('.grid-container').width());

                        if ( event.type == "exception" ) {
                            KenandyErp.Alert( "An error occurred while processing your request. " +
                                "Please contact support" );

                            // trigger onreadfailure
                            $( "#pprod" ).trigger( {
                                type: ONREADFAILURE,
                                result: result,
                                event: event
                            } );
                        } else {
                            KenandyErp.CleanNamespace( result.records,
                                AgreementViewComponent.namespaceUU );

                            options.success( result.records );

                            // trigger onreadsuccess
                            $( "#pprod" ).trigger( {
                                type: ONREADSUCCESS,
                                result: result,
                                event: event
                            } );
                        }
                    } );
            },

            update: function( options ) {
                save( options, agreementLineDateFieldsParsed, "update" );
            },

            create: function( options ) {
                save( options, agreementLineDateFieldsParsed, "create" );
            },

            destroy: function( options ) {
                save( options, agreementLineDateFieldsParsed, "delete" );
            }
        },
        batch: true,
        schema: {
            model: model,
            parse:function( response ) {
                $.each( response, function( idx, item ) {
                    if ( item.agl.Parent_Agreement_Line__c === undefined ) {

//                        item.parentId = null;
                        item.agl.Parent_Agreement_Line__c = null;
                    }

                    item.id = item.agl.Id;
                    item = Serializer.IncludeNulls( item, { fields: _nestedFields } );
                    item = Serializer.ConvertFromSFDCDate( item, { dateFields: agreementLineDateFieldsParsed } );
                } );

                return response;
            }
        },
        filter: [
            { field: "agl.Revision_Status__c", operator: "neq", value: "Rejected"},
            { field: "agl.Revision_Status__c", operator: "neq", value: "Revised"}
        ]
    } );

    var toolBarButtons = "<button data-command=\"create\" class=\"k-button k-button-icontext k-grid-add\"><span class=\"k-icon k-add\"></span>Add new record</button>" +
    "<label style='padding-left: 50px; padding-right: 5px;'>" + AgreementViewComponent.actionLabel + ":</label>" +
    "<input id='promoProdActionDropdown' style='width: 225px;' />" +
    "<a class=\"k-button k-button-icontext k-grid-promoProdActionGo\" href=\"\\#\">Go</a>" + 
    "<label style='padding-left: 50px; padding-right: 5px;'>Views:</label>" + 
    "<input class='grid-view-options' />"
    ;

    var treeList = $( "#pprod" ).width( $( '#mainpage').width()).kendoTreeList( {
        dataSource: dataSource,
        toolbar: toolBarButtons,
        editable: true,
        selectable: true,
        resizable: true,
        scrollable: true,
        filterable: true,
        columnMenu: true,
        reorderable: true,
        columns: columns,
        navigatable: true,
    	pageable: { 
    		input: true,
            numeric: false,
    		pageSizes: KenandyErp.KendoGridOptions.PageSizes,
    		messages: {
    			display: '{0} - {1} of {2} records',
    			empty: '',
    			itemsPerPage: 'records per page'
    		}
		},
        edit: function( e ) {

            var self = this;
            var data = this.dataSource;
            var options = this.dataSource.options;

            if ( e.model.isNew() || e.model.get("id") == null ) {                     // if row is new, then set defaults
                e.model.agl.set( "Agreement__c", agreement.Id );
                e.model.agl.set( "Start_Date__c", KenandyErp.ParseSFDCDate( agreement.Start_Date__c ) );
                e.model.agl.set( "End_Date__c", KenandyErp.ParseSFDCDate( agreement.End_Date__c ) );
                e.model.agl.set( "List_Price__c", null );
                e.model.agl.set( "Agreement_Price__c", null );
                //KNDY-13886 Unable to add agreement line - Due to date field being passed as null
                //e.model.agl.set( "Revision_Approval_date__c", null ); commenting this out to prevent UI error
                e.model.agl.set( "Revised__c", false );
                e.model.agl.set( "Customer_PO__c", agreement.Customer_PO__c);
                e.model.agl.set( "Product_Type__c", 'Product');
                if(agreement.Agreement_Type__c == 'Sales Agreement'){
                    e.model.agl.set( "Price_Type__c", 'Sales');
                }else if(agreement.Agreement_Type__c == 'Rental'){
                    e.model.agl.set( "Price_Type__c", 'Recurring');
                }
            }
            $.each(data.options.schema.model.fields, function(index, item) {
                if(item && item.type == 'boolean'){
                    e.model.get(index) ? e.model.get(index) : e.model.set(index, false);
                }
            });

            $(e.container).find('input[name="agl.Product_Reference__c"]').bind('blur',

            $.proxy(utility.GetAGLineDetailsFromProductRef, { grid: treeList,

                options: { 
                    parentGrid: $('#promotions').data('kendoGridActionList').dataSource.data()[0]

                },

                trigger: 'blur',

             })
            );
            $(e.container).find('input[name="agl.Product__c"]').bind('blur',

            $.proxy(utility.GetAGLineDetailsFromProduct, { grid: treeList,

                options: { 
                    parentGrid: $('#promotions').data('kendoGridActionList').dataSource.data()[0]

                },

                trigger: 'blur',

             })
            );


            if( $( e.container ).find('input[name="agl.Product__c"]').length > 0 ) {
                var lookupSearchFilters = [];
                lookupSearchFilters.push( {field: "agl.Product__c", filter: " Company__c = \'" + agreement.Company__c + "\'"});
                $(e.container).find('input[name="agl.Product__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
            }
            if( $( e.container ).find('input[name="agl.Ship_To__c"]').length > 0 ) {
                var lookupSearchFilters = [];
                lookupSearchFilters.push( {field: "agl.Ship_To__c", filter: "RecordType.DeveloperName  = \'Ship_To\'" });
                $(e.container).find('input[name="agl.Ship_To__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
            }
            if( $( e.container ).find('input[name="agl.Product_Reference__c"]').length > 0 ) {
                var lookupSearchFilters = [];
                lookupSearchFilters.push( {field: "agl.Product_Reference__c", filter: " Customer__c = \'" + agreement.Customer__c + "\'  AND Active__c = true "});
                $(e.container).find('input[name="agl.Product_Reference__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
            }
            
            if( $( e.container ).find('input[name="agl.Billing_Category__c"]').length > 0 ) {
                var lookupSearchFilters = [];
                lookupSearchFilters.push( {field: "agl.Billing_Category__c", filter: "Type__c  = \'Billing\'" });
                $(e.container).find('input[name="agl.Billing_Category__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
            }
            if( $( e.container ).find('input[name="agl.Fulfillment_Category__c"]').length > 0 ) {
                var lookupSearchFilters = [];
                lookupSearchFilters.push( {field: "agl.Fulfillment_Category__c", filter: "Type__c  = \'Fulfillment\'" });
                $(e.container).find('input[name="agl.Fulfillment_Category__c"]').data('kendoLookup').options.criteria = lookupSearchFilters;
            }
            if( $( e.container ).find('input[data-role="datetimepicker"]').length > 0 ) {
                var dateTimePickers =  $('input[data-role="datetimepicker"]');
                $.each( dateTimePickers, function( idx, item) {
                    item = $(item).data("kendoDateTimePicker");
                    item.setOptions({ format: "M/d/yyyy", parseFormats: "M/d/yyyy hh:mm"});
                } );
            }
        },
        change: function( e ) {
            var item = { Id: AgreementViewComponent.promoProdPrefix };

            var selectedItem = this.dataItem( this.select() );

            if ( typeof selectedItem !== "undefined" ) {
                if ( selectedItem !== null ) {
						item = selectedItem;
                }
            }

            //  see if this really changed ?
            if ( AgreementViewComponent.promotedProd != item ) {
                AgreementViewComponent.promotedProd = item;

                $.each( AgreementViewComponent.promoProdActionConfig, function() {

                    var regex = /\?[a-zA-Z0-9=]*/;
                    this.content = this.content && this.content.replace( regex, "?id=" + item.id );

                } );
            }
        }
    } ).data( "kendoTreeList" );
    
    utility.elementInit( treeList, false );
    treeList.bind("dataBound", dataBound);
};

function dataBound(e){

        $(".k-grid-edit").each(function () {
                    

            var currentDataItem =  $("#pprod").data("kendoTreeList").dataItem($(this).closest("tr")).agl;
            console.log(currentDataItem);

            if (currentDataItem.Agreement__r && (currentDataItem.Agreement__r.Status__c == 'Approved' && (currentDataItem.Revision_Status__c == 'Approved' || currentDataItem.Revision_Status__c == null))) {
                $(this).addClass('k-state-disabled').attr("disabled",true);
            } else {
                $(this).removeClass('k-state-disabled').attr("disabled",false);
            }
        });
        
        $(".k-grid-delete").each(function () {
                    
            var currentDataItem =  $("#pprod").data("kendoTreeList").dataItem($(this).closest("tr")).agl;

            if (currentDataItem.Agreement__r && (currentDataItem.Agreement__r.Status__c == 'Approved' && (currentDataItem.Revision_Status__c == 'Approved' || currentDataItem.Revision_Status__c == null))) {
                $(this).addClass('k-state-disabled').attr("disabled",true);
            } else {
                $(this).removeClass('k-state-disabled').attr("disabled",false);
            }   
        });
}

},{"../actions/TreeListSaveAction":4,"../utils/AgreementViewHelper":7}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
